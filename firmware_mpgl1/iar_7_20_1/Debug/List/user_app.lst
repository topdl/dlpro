###############################################################################
#
# IAR ANSI C/C++ Compiler V7.20.1.7305/W32 for ARM        13/Jun/2016  16:50:11
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        F:\ѧϰ\EiE\eiegit\dlpro\firmware_mpg_common\application\user_app.c
#    Command line =  
#        F:\ѧϰ\EiE\eiegit\dlpro\firmware_mpg_common\application\user_app.c -D
#        MPGL1 -D MPG1 --preprocess=cl
#        F:\ѧϰ\EiE\eiegit\dlpro\firmware_mpgl1\iar_7_20_1\Debug\List\ -lC
#        F:\ѧϰ\EiE\eiegit\dlpro\firmware_mpgl1\iar_7_20_1\Debug\List\ -o
#        F:\ѧϰ\EiE\eiegit\dlpro\firmware_mpgl1\iar_7_20_1\Debug\Obj\ --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --no_clustering
#        --no_scheduling --debug --endian=little --cpu=Cortex-M3 -e --fpu=None
#        --dlib_config F:\elenic\arm\INC\c\DLib_Config_Normal.h -I
#        F:\ѧϰ\EiE\eiegit\dlpro\firmware_mpgl1\iar_7_20_1\ -I
#        F:\ѧϰ\EiE\eiegit\dlpro\firmware_mpgl1\iar_7_20_1\..\bsp\ -I
#        F:\ѧϰ\EiE\eiegit\dlpro\firmware_mpgl1\iar_7_20_1\..\drivers\ -I
#        F:\ѧϰ\EiE\eiegit\dlpro\firmware_mpgl1\iar_7_20_1\..\application\ -I
#        F:\ѧϰ\EiE\eiegit\dlpro\firmware_mpgl1\iar_7_20_1\..\..\firmware_mpg_common\
#        -I
#        F:\ѧϰ\EiE\eiegit\dlpro\firmware_mpgl1\iar_7_20_1\..\..\firmware_mpg_common\application\
#        -I
#        F:\ѧϰ\EiE\eiegit\dlpro\firmware_mpgl1\iar_7_20_1\..\..\firmware_mpg_common\cmsis\
#        -I
#        F:\ѧϰ\EiE\eiegit\dlpro\firmware_mpgl1\iar_7_20_1\..\..\firmware_mpg_common\drivers\
#        -On --use_c++_inline -I F:\elenic\arm\CMSIS\Include\
#    List file    =  
#        F:\ѧϰ\EiE\eiegit\dlpro\firmware_mpgl1\iar_7_20_1\Debug\List\user_app.lst
#    Object file  =  
#        F:\ѧϰ\EiE\eiegit\dlpro\firmware_mpgl1\iar_7_20_1\Debug\Obj\user_app.o
#
###############################################################################

F:\ѧϰ\EiE\eiegit\dlpro\firmware_mpg_common\application\user_app.c
      1          /**********************************************************************************************************************
      2          File: user_app.c                                                                
      3          
      4          ----------------------------------------------------------------------------------------------------------------------
      5          To start a new task using this user_app as a template:
      6           1. Copy both user_app.c and user_app.h to the Application directory
      7           2. Rename the files yournewtaskname.c and yournewtaskname.h
      8           3. Add yournewtaskname.c and yournewtaskname.h to the Application Include and Source groups in the IAR project
      9           4. Use ctrl-h (make sure "Match Case" is checked) to find and replace all instances of "user_app" with "yournewtaskname"
     10           5. Use ctrl-h to find and replace all instances of "UserApp" with "YourNewTaskName"
     11           6. Use ctrl-h to find and replace all instances of "USER_APP" with "YOUR_NEW_TASK_NAME"
     12           7. Add a call to YourNewTaskNameInitialize() in the init section of main
     13           8. Add a call to YourNewTaskNameRunActiveState() in the Super Loop section of main
     14           9. Update yournewtaskname.h per the instructions at the top of yournewtaskname.h
     15          10. Delete this text (between the dashed lines) and update the Description below to describe your task
     16          ----------------------------------------------------------------------------------------------------------------------
     17          
     18          Description:
     19          This is a user_app.c file template 
     20          
     21          ------------------------------------------------------------------------------------------------------------------------
     22          API:
     23          
     24          Public functions:
     25          
     26          
     27          Protected System functions:
     28          void UserAppInitialize(void)
     29          Runs required initialzation for the task.  Should only be called once in main init section.
     30          
     31          void UserAppRunActiveState(void)
     32          Runs current task state.  Should only be called once in main loop.
     33          
     34          
     35          **********************************************************************************************************************/
     36          
     37          #include "configuration.h"

  /**********************************************************************************************************************
                                                                                                                        ^
"F:\ѧϰ\EiE\eiegit\dlpro\firmware_mpg_common\configuration.h",1  Warning[Pa050]: 
          non-native end of line sequence detected (this diagnostic is only
          issued once)
     38          
     39          /***********************************************************************************************************************
     40          Global variable definitions with scope across entire project.
     41          All Global variable names shall start with "G_"
     42          ***********************************************************************************************************************/
     43          /* New variables */

   \                                 In section .bss, align 4
     44          volatile u32 G_u32UserAppFlags;                       /* Global state flags */
   \                     G_u32UserAppFlags:
   \   00000000                      DS8 4
     45          
     46          
     47          /*--------------------------------------------------------------------------------------------------------------------*/
     48          /* Existing variables (defined in other files -- should all contain the "extern" keyword) */
     49          extern volatile u32 G_u32SystemFlags;                  /* From main.c */
     50          extern volatile u32 G_u32ApplicationFlags;             /* From main.c */
     51          
     52          extern volatile u32 G_u32SystemTime1ms;                /* From board-specific source file */
     53          extern volatile u32 G_u32SystemTime1s;                 /* From board-specific source file */
     54          
     55          
     56          /***********************************************************************************************************************
     57          Global variable definitions with scope limited to this local application.
     58          Variable names shall start with "UserApp_" and be declared as static.
     59          ***********************************************************************************************************************/

   \                                 In section .bss, align 4
     60          static fnCode_type UserApp_StateMachine;            /* The state machine function pointer */
   \                     UserApp_StateMachine:
   \   00000000                      DS8 4
     61          static u32 UserApp_u32Timeout;                      /* Timeout counter used across states */

   \                                 In section .bss, align 1
     62          static u8 UserApp_CursorPosition;
   \                     UserApp_CursorPosition:
   \   00000000                      DS8 1

   \                                 In section .bss, align 4
     63          static u8 u8TransMessage[8]={00,00,00,00,00,00,00,00};/*message of signal to control airconditional*/
   \                     u8TransMessage:
   \   00000000                      DS8 8

   \                                 In section .data, align 4
     64          u8 u8on[]="on";
   \                     u8on:
   \   00000000   0x6F 0x6E          DC8 "on"
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .data, align 4
     65          u8 u8off[]="off";
   \                     u8off:
   \   00000000   0x6F 0x66          DC8 "off"
   \              0x66 0x00    

   \                                 In section .data, align 1
     66          bool boolcallonce=TRUE;
   \                     boolcallonce:
   \   00000000   0x01               DC8 1

   \                                 In section .data, align 4
     67          u8 u8Funtion1Message[]="switch funtio temper";
   \                     u8Funtion1Message:
   \   00000000   0x73 0x77          DC8 "switch funtio temper"
   \              0x69 0x74    
   \              0x63 0x68    
   \              0x20 0x66    
   \              0x75 0x6E    
   \              0x74 0x69    
   \              0x6F 0x20    
   \              0x74 0x65    
   \              0x6D 0x70    
   \              0x65 0x72    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .data, align 4
     68          u8 u8Funtion2Message[]="wind auto sleep";
   \                     u8Funtion2Message:
   \   00000000   0x77 0x69          DC8 "wind auto sleep"
   \              0x6E 0x64    
   \              0x20 0x61    
   \              0x75 0x74    
   \              0x6F 0x20    
   \              0x73 0x6C    
   \              0x65 0x65    
   \              0x70 0x00    
     69          /**********************************************************************************************************************
     70          Function Definitions
     71          **********************************************************************************************************************/
     72          
     73          /*--------------------------------------------------------------------------------------------------------------------*/
     74          /* Public functions                                                                                                   */
     75          /*--------------------------------------------------------------------------------------------------------------------*/
     76          
     77          
     78          /*--------------------------------------------------------------------------------------------------------------------*/
     79          /* Protected functions                                                                                                */
     80          /*--------------------------------------------------------------------------------------------------------------------*/
     81          
     82          /*--------------------------------------------------------------------------------------------------------------------
     83          Function: UserAppInitialize
     84          
     85          Description:
     86          Initializes the State Machine and its variables.
     87          
     88          Requires:
     89            -
     90          
     91          Promises:
     92            - 
     93          */

   \                                 In section .text, align 2, keep-with-next
     94          void UserAppInitialize(void)
     95          {
   \                     UserAppInitialize: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
     96            LCDCommand(LCD_CLEAR_CMD);
   \   00000002   0x2001             MOVS     R0,#+1
   \   00000004   0x.... 0x....      BL       LCDCommand
     97            LCDMessage(LINE1_START_ADDR,u8Funtion1Message);
   \   00000008   0x.... 0x....      LDR.W    R1,??DataTable4
   \   0000000C   0x2000             MOVS     R0,#+0
   \   0000000E   0x.... 0x....      BL       LCDMessage
     98            LCDMessage(LINE2_START_ADDR,u8Funtion2Message);
   \   00000012   0x.... 0x....      LDR.W    R1,??DataTable4_1
   \   00000016   0x2040             MOVS     R0,#+64
   \   00000018   0x.... 0x....      BL       LCDMessage
     99            LCDCommand(LCD_HOME_CMD);
   \   0000001C   0x2002             MOVS     R0,#+2
   \   0000001E   0x.... 0x....      BL       LCDCommand
    100            LCDCommand(LCD_DISPLAY_CMD | LCD_DISPLAY_ON | LCD_DISPLAY_CURSOR | LCD_DISPLAY_BLINK);
   \   00000022   0x200F             MOVS     R0,#+15
   \   00000024   0x.... 0x....      BL       LCDCommand
    101            UserApp_CursorPosition = LINE1_START_ADDR;
   \   00000028   0x2000             MOVS     R0,#+0
   \   0000002A   0x.... 0x....      LDR.W    R1,??DataTable4_2
   \   0000002E   0x7008             STRB     R0,[R1, #+0]
    102          
    103            /* If good initialization, set state to Idle */
    104            if( 1 )
    105            {
    106              UserApp_StateMachine = UserAppSM_Idle;
   \   00000030   0x.... 0x....      ADR.W    R0,UserAppSM_Idle
   \   00000034   0x.... 0x....      LDR.W    R1,??DataTable4_3
   \   00000038   0x6008             STR      R0,[R1, #+0]
    107            }
    108            else
    109            {
    110              /* The task isn't properly initialized, so shut it down and don't run */
    111              UserApp_StateMachine = UserAppSM_FailedInit;
    112            }
    113          
    114          } /* end UserAppInitialize() */
   \   0000003A   0xBD01             POP      {R0,PC}          ;; return
    115          
    116          
    117          /*----------------------------------------------------------------------------------------------------------------------
    118          Function UserAppRunActiveState()
    119          
    120          Description:
    121          Selects and runs one iteration of the current state in the state machine.
    122          All state machines have a TOTAL of 1ms to execute, so on average n state machines
    123          may take 1ms / n to execute.
    124          
    125          Requires:
    126            - State machine function pointer points at current state
    127          
    128          Promises:
    129            - Calls the function to pointed by the state machine function pointer
    130          */

   \                                 In section .text, align 2, keep-with-next
    131          void UserAppRunActiveState(void)
    132          {
   \                     UserAppRunActiveState: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    133            UserApp_StateMachine();
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable4_3
   \   00000006   0x6800             LDR      R0,[R0, #+0]
   \   00000008   0x4780             BLX      R0
    134          
    135          } /* end UserAppRunActiveState */
   \   0000000A   0xBD01             POP      {R0,PC}          ;; return
    136          
    137          
    138          /*--------------------------------------------------------------------------------------------------------------------*/
    139          /* Private functions                                                                                                  */
    140          /*--------------------------------------------------------------------------------------------------------------------*/
    141          
    142          
    143          /**********************************************************************************************************************
    144          State Machine Function Definitions
    145          **********************************************************************************************************************/
    146          
    147          /*-------------------------------------------------------------------------------------------------------------------*/
    148          /* Wait for a message to be queued */

   \                                 In section .text, align 4, keep-with-next
    149          static void UserAppSM_Idle(void)
    150          {
   \                     UserAppSM_Idle: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    151            static u8 u8tempcount=20;
    152            while(boolcallonce)
   \                     ??UserAppSM_Idle_0: (+1)
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable4_4
   \   00000006   0x7800             LDRB     R0,[R0, #+0]
   \   00000008   0x2800             CMP      R0,#+0
   \   0000000A   0xD027             BEQ.N    ??UserAppSM_Idle_1
    153            {
    154             LCDCommand(LCD_CLEAR_CMD);
   \   0000000C   0x2001             MOVS     R0,#+1
   \   0000000E   0x.... 0x....      BL       LCDCommand
    155             LCDMessage(LINE1_START_ADDR,u8Funtion1Message);
   \   00000012   0x.... 0x....      LDR.W    R1,??DataTable4
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0x.... 0x....      BL       LCDMessage
    156             LCDMessage(LINE2_START_ADDR,u8Funtion2Message);
   \   0000001C   0x.... 0x....      LDR.W    R1,??DataTable4_1
   \   00000020   0x2040             MOVS     R0,#+64
   \   00000022   0x.... 0x....      BL       LCDMessage
    157             if(u8TransMessage[0]=0x00)
                       ^
Warning[Pe187]: use of "=" where "==" may have been intended
   \   00000026   0x2000             MOVS     R0,#+0
   \   00000028   0x.... 0x....      LDR.W    R1,??DataTable4_5
   \   0000002C   0x7008             STRB     R0,[R1, #+0]
   \   0000002E   0x.... 0x....      LDR.W    R0,??DataTable4_5
   \   00000032   0x7800             LDRB     R0,[R0, #+0]
   \   00000034   0x2800             CMP      R0,#+0
   \   00000036   0xD005             BEQ.N    ??UserAppSM_Idle_2
    158             {
    159             LCDMessage(LINE2_START_ADDR+16,u8off);
   \   00000038   0x.... 0x....      LDR.W    R1,??DataTable4_6
   \   0000003C   0x2050             MOVS     R0,#+80
   \   0000003E   0x.... 0x....      BL       LCDMessage
   \   00000042   0xE004             B.N      ??UserAppSM_Idle_3
    160             }
    161             else
    162             {
    163              LCDMessage(LINE2_START_ADDR+16,u8on);
   \                     ??UserAppSM_Idle_2: (+1)
   \   00000044   0x.... 0x....      LDR.W    R1,??DataTable4_7
   \   00000048   0x2050             MOVS     R0,#+80
   \   0000004A   0x.... 0x....      BL       LCDMessage
    164             }
    165            LCDCommand(LCD_HOME_CMD);
   \                     ??UserAppSM_Idle_3: (+1)
   \   0000004E   0x2002             MOVS     R0,#+2
   \   00000050   0x.... 0x....      BL       LCDCommand
    166            boolcallonce=FALSE;
   \   00000054   0x2000             MOVS     R0,#+0
   \   00000056   0x....             LDR.N    R1,??DataTable4_4
   \   00000058   0x7008             STRB     R0,[R1, #+0]
   \   0000005A   0xE7D2             B.N      ??UserAppSM_Idle_0
    167            }
    168            u8tempcount--;
   \                     ??UserAppSM_Idle_1: (+1)
   \   0000005C   0x....             LDR.N    R0,??DataTable4_8
   \   0000005E   0x7800             LDRB     R0,[R0, #+0]
   \   00000060   0x1E40             SUBS     R0,R0,#+1
   \   00000062   0x....             LDR.N    R1,??DataTable4_8
   \   00000064   0x7008             STRB     R0,[R1, #+0]
    169            if(u8tempcount==0)
   \   00000066   0x....             LDR.N    R0,??DataTable4_8
   \   00000068   0x7800             LDRB     R0,[R0, #+0]
   \   0000006A   0x2800             CMP      R0,#+0
   \   0000006C   0xF040 0x80A5      BNE.W    ??UserAppSM_Idle_4
    170            {
    171            //button 1  move cursor forward ------------------------------------------
    172            if(WasButtonPressed(BUTTON1))
   \   00000070   0x2001             MOVS     R0,#+1
   \   00000072   0x.... 0x....      BL       WasButtonPressed
   \   00000076   0x2800             CMP      R0,#+0
   \   00000078   0xD028             BEQ.N    ??UserAppSM_Idle_5
    173            {
    174              ButtonAcknowledge(BUTTON1);
   \   0000007A   0x2001             MOVS     R0,#+1
   \   0000007C   0x.... 0x....      BL       ButtonAcknowledge
    175              
    176              /* Handle the two special cases or just the regular case */
    177              if(UserApp_CursorPosition == (LINE1_END_ADDR-5))
   \   00000080   0x....             LDR.N    R0,??DataTable4_2
   \   00000082   0x7800             LDRB     R0,[R0, #+0]
   \   00000084   0x280E             CMP      R0,#+14
   \   00000086   0xD103             BNE.N    ??UserAppSM_Idle_6
    178              {
    179                UserApp_CursorPosition = LINE2_START_ADDR;
   \   00000088   0x2040             MOVS     R0,#+64
   \   0000008A   0x....             LDR.N    R1,??DataTable4_2
   \   0000008C   0x7008             STRB     R0,[R1, #+0]
   \   0000008E   0xE016             B.N      ??UserAppSM_Idle_7
    180              }
    181          
    182              else if (UserApp_CursorPosition == (LINE2_END_ADDR-9))
   \                     ??UserAppSM_Idle_6: (+1)
   \   00000090   0x....             LDR.N    R0,??DataTable4_2
   \   00000092   0x7800             LDRB     R0,[R0, #+0]
   \   00000094   0x284A             CMP      R0,#+74
   \   00000096   0xD103             BNE.N    ??UserAppSM_Idle_8
    183              {
    184                UserApp_CursorPosition = LINE1_START_ADDR;
   \   00000098   0x2000             MOVS     R0,#+0
   \   0000009A   0x....             LDR.N    R1,??DataTable4_2
   \   0000009C   0x7008             STRB     R0,[R1, #+0]
   \   0000009E   0xE00E             B.N      ??UserAppSM_Idle_7
    185              }
    186              
    187              /* Otherwise just increment one space */
    188              else
    189              {
    190                if(UserApp_CursorPosition>=0x40)
   \                     ??UserAppSM_Idle_8: (+1)
   \   000000A0   0x....             LDR.N    R0,??DataTable4_2
   \   000000A2   0x7800             LDRB     R0,[R0, #+0]
   \   000000A4   0x2840             CMP      R0,#+64
   \   000000A6   0xDB05             BLT.N    ??UserAppSM_Idle_9
    191                {
    192                  UserApp_CursorPosition+=5;
   \   000000A8   0x....             LDR.N    R0,??DataTable4_2
   \   000000AA   0x7800             LDRB     R0,[R0, #+0]
   \   000000AC   0x1D40             ADDS     R0,R0,#+5
   \   000000AE   0x....             LDR.N    R1,??DataTable4_2
   \   000000B0   0x7008             STRB     R0,[R1, #+0]
   \   000000B2   0xE004             B.N      ??UserAppSM_Idle_7
    193                }
    194                else
    195                {
    196                UserApp_CursorPosition+=7;
   \                     ??UserAppSM_Idle_9: (+1)
   \   000000B4   0x....             LDR.N    R0,??DataTable4_2
   \   000000B6   0x7800             LDRB     R0,[R0, #+0]
   \   000000B8   0x1DC0             ADDS     R0,R0,#+7
   \   000000BA   0x....             LDR.N    R1,??DataTable4_2
   \   000000BC   0x7008             STRB     R0,[R1, #+0]
    197                }
    198              }
    199               LCDCommand(LCD_ADDRESS_CMD | UserApp_CursorPosition);
   \                     ??UserAppSM_Idle_7: (+1)
   \   000000BE   0x....             LDR.N    R0,??DataTable4_2
   \   000000C0   0x7800             LDRB     R0,[R0, #+0]
   \   000000C2   0xF050 0x0080      ORRS     R0,R0,#0x80
   \   000000C6   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000C8   0x.... 0x....      BL       LCDCommand
    200            }
    201              //button 0 move cursor left ---------------------------------------------
    202              if(WasButtonPressed(BUTTON0))
   \                     ??UserAppSM_Idle_5: (+1)
   \   000000CC   0x2000             MOVS     R0,#+0
   \   000000CE   0x.... 0x....      BL       WasButtonPressed
   \   000000D2   0x2800             CMP      R0,#+0
   \   000000D4   0xD028             BEQ.N    ??UserAppSM_Idle_10
    203            {
    204              ButtonAcknowledge(BUTTON0);
   \   000000D6   0x2000             MOVS     R0,#+0
   \   000000D8   0x.... 0x....      BL       ButtonAcknowledge
    205              
    206              /* Handle the two special cases or just the regular case */
    207              if(UserApp_CursorPosition == LINE1_START_ADDR)
   \   000000DC   0x....             LDR.N    R0,??DataTable4_2
   \   000000DE   0x7800             LDRB     R0,[R0, #+0]
   \   000000E0   0x2800             CMP      R0,#+0
   \   000000E2   0xD103             BNE.N    ??UserAppSM_Idle_11
    208              {
    209                UserApp_CursorPosition = LINE2_END_ADDR-9;
   \   000000E4   0x204A             MOVS     R0,#+74
   \   000000E6   0x....             LDR.N    R1,??DataTable4_2
   \   000000E8   0x7008             STRB     R0,[R1, #+0]
   \   000000EA   0xE016             B.N      ??UserAppSM_Idle_12
    210              }
    211          
    212              else if (UserApp_CursorPosition == LINE2_START_ADDR)
   \                     ??UserAppSM_Idle_11: (+1)
   \   000000EC   0x....             LDR.N    R0,??DataTable4_2
   \   000000EE   0x7800             LDRB     R0,[R0, #+0]
   \   000000F0   0x2840             CMP      R0,#+64
   \   000000F2   0xD103             BNE.N    ??UserAppSM_Idle_13
    213              {
    214                UserApp_CursorPosition = LINE1_END_ADDR-5;
   \   000000F4   0x200E             MOVS     R0,#+14
   \   000000F6   0x....             LDR.N    R1,??DataTable4_2
   \   000000F8   0x7008             STRB     R0,[R1, #+0]
   \   000000FA   0xE00E             B.N      ??UserAppSM_Idle_12
    215              }
    216              
    217              /*cursor move*/
    218              else
    219              {
    220                if(UserApp_CursorPosition>=0x40)
   \                     ??UserAppSM_Idle_13: (+1)
   \   000000FC   0x....             LDR.N    R0,??DataTable4_2
   \   000000FE   0x7800             LDRB     R0,[R0, #+0]
   \   00000100   0x2840             CMP      R0,#+64
   \   00000102   0xDB05             BLT.N    ??UserAppSM_Idle_14
    221                {
    222                  UserApp_CursorPosition-=5;
   \   00000104   0x....             LDR.N    R0,??DataTable4_2
   \   00000106   0x7800             LDRB     R0,[R0, #+0]
   \   00000108   0x1F40             SUBS     R0,R0,#+5
   \   0000010A   0x....             LDR.N    R1,??DataTable4_2
   \   0000010C   0x7008             STRB     R0,[R1, #+0]
   \   0000010E   0xE004             B.N      ??UserAppSM_Idle_12
    223                }
    224                else
    225                {
    226                UserApp_CursorPosition-=7;
   \                     ??UserAppSM_Idle_14: (+1)
   \   00000110   0x....             LDR.N    R0,??DataTable4_2
   \   00000112   0x7800             LDRB     R0,[R0, #+0]
   \   00000114   0x1FC0             SUBS     R0,R0,#+7
   \   00000116   0x....             LDR.N    R1,??DataTable4_2
   \   00000118   0x7008             STRB     R0,[R1, #+0]
    227                }
    228              }
    229               LCDCommand(LCD_ADDRESS_CMD | UserApp_CursorPosition);
   \                     ??UserAppSM_Idle_12: (+1)
   \   0000011A   0x....             LDR.N    R0,??DataTable4_2
   \   0000011C   0x7800             LDRB     R0,[R0, #+0]
   \   0000011E   0xF050 0x0080      ORRS     R0,R0,#0x80
   \   00000122   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   00000124   0x.... 0x....      BL       LCDCommand
    230            }
    231            if(WasButtonPressed(BUTTON2))
   \                     ??UserAppSM_Idle_10: (+1)
   \   00000128   0x2002             MOVS     R0,#+2
   \   0000012A   0x.... 0x....      BL       WasButtonPressed
   \   0000012E   0x2800             CMP      R0,#+0
   \   00000130   0xD040             BEQ.N    ??UserAppSM_Idle_15
    232            {
    233              ButtonAcknowledge(BUTTON2);
   \   00000132   0x2002             MOVS     R0,#+2
   \   00000134   0x.... 0x....      BL       ButtonAcknowledge
    234              { 
    235                switch(UserApp_CursorPosition)
   \   00000138   0x....             LDR.N    R0,??DataTable4_2
   \   0000013A   0x7800             LDRB     R0,[R0, #+0]
   \   0000013C   0x2800             CMP      R0,#+0
   \   0000013E   0xD00A             BEQ.N    ??UserAppSM_Idle_16
   \   00000140   0x2807             CMP      R0,#+7
   \   00000142   0xD010             BEQ.N    ??UserAppSM_Idle_17
   \   00000144   0x280E             CMP      R0,#+14
   \   00000146   0xD016             BEQ.N    ??UserAppSM_Idle_18
   \   00000148   0x2840             CMP      R0,#+64
   \   0000014A   0xD01C             BEQ.N    ??UserAppSM_Idle_19
   \   0000014C   0x2845             CMP      R0,#+69
   \   0000014E   0xD022             BEQ.N    ??UserAppSM_Idle_20
   \   00000150   0x284A             CMP      R0,#+74
   \   00000152   0xD028             BEQ.N    ??UserAppSM_Idle_21
   \   00000154   0xE02E             B.N      ??UserAppSM_Idle_15
    236                {
    237                  case 0x00:
    238                    boolcallonce=TRUE;
   \                     ??UserAppSM_Idle_16: (+1)
   \   00000156   0x2001             MOVS     R0,#+1
   \   00000158   0x....             LDR.N    R1,??DataTable4_4
   \   0000015A   0x7008             STRB     R0,[R1, #+0]
    239                    UserApp_StateMachine = UserAppSM_SwitchSelect;         
   \   0000015C   0x.... 0x....      ADR.W    R0,UserAppSM_SwitchSelect
   \   00000160   0x....             LDR.N    R1,??DataTable4_3
   \   00000162   0x6008             STR      R0,[R1, #+0]
    240                  break;
   \   00000164   0xE026             B.N      ??UserAppSM_Idle_15
    241                  case 0x07:
    242                    boolcallonce=TRUE;
   \                     ??UserAppSM_Idle_17: (+1)
   \   00000166   0x2001             MOVS     R0,#+1
   \   00000168   0x....             LDR.N    R1,??DataTable4_4
   \   0000016A   0x7008             STRB     R0,[R1, #+0]
    243                    UserApp_StateMachine = UserAppSM_FuntionhSelect;          
   \   0000016C   0x.... 0x....      ADR.W    R0,UserAppSM_FuntionhSelect
   \   00000170   0x....             LDR.N    R1,??DataTable4_3
   \   00000172   0x6008             STR      R0,[R1, #+0]
    244                  break;
   \   00000174   0xE01E             B.N      ??UserAppSM_Idle_15
    245                  case 0x0e:
    246                    boolcallonce=TRUE;
   \                     ??UserAppSM_Idle_18: (+1)
   \   00000176   0x2001             MOVS     R0,#+1
   \   00000178   0x....             LDR.N    R1,??DataTable4_4
   \   0000017A   0x7008             STRB     R0,[R1, #+0]
    247                    UserApp_StateMachine = UserAppSM_TemperSelect;        
   \   0000017C   0x.... 0x....      ADR.W    R0,UserAppSM_TemperSelect
   \   00000180   0x....             LDR.N    R1,??DataTable4_3
   \   00000182   0x6008             STR      R0,[R1, #+0]
    248                  break;
   \   00000184   0xE016             B.N      ??UserAppSM_Idle_15
    249                  case 0x40:
    250                    boolcallonce=TRUE;
   \                     ??UserAppSM_Idle_19: (+1)
   \   00000186   0x2001             MOVS     R0,#+1
   \   00000188   0x....             LDR.N    R1,??DataTable4_4
   \   0000018A   0x7008             STRB     R0,[R1, #+0]
    251                    UserApp_StateMachine = UserAppSM_WindSelect;         
   \   0000018C   0x.... 0x....      ADR.W    R0,UserAppSM_WindSelect
   \   00000190   0x....             LDR.N    R1,??DataTable4_3
   \   00000192   0x6008             STR      R0,[R1, #+0]
    252                  break;
   \   00000194   0xE00E             B.N      ??UserAppSM_Idle_15
    253                  case 0x45:
    254                    boolcallonce=TRUE;
   \                     ??UserAppSM_Idle_20: (+1)
   \   00000196   0x2001             MOVS     R0,#+1
   \   00000198   0x....             LDR.N    R1,??DataTable4_4
   \   0000019A   0x7008             STRB     R0,[R1, #+0]
    255                    UserApp_StateMachine = UserAppSM_AutoSelect;       
   \   0000019C   0x.... 0x....      ADR.W    R0,UserAppSM_AutoSelect
   \   000001A0   0x....             LDR.N    R1,??DataTable4_3
   \   000001A2   0x6008             STR      R0,[R1, #+0]
    256                  break;
   \   000001A4   0xE006             B.N      ??UserAppSM_Idle_15
    257                  case 0x4a:
    258                    boolcallonce=TRUE;
   \                     ??UserAppSM_Idle_21: (+1)
   \   000001A6   0x2001             MOVS     R0,#+1
   \   000001A8   0x....             LDR.N    R1,??DataTable4_4
   \   000001AA   0x7008             STRB     R0,[R1, #+0]
    259                    UserApp_StateMachine = UserAppSM_SleepSelect;
   \   000001AC   0x.... 0x....      ADR.W    R0,UserAppSM_SleepSelect
   \   000001B0   0x....             LDR.N    R1,??DataTable4_3
   \   000001B2   0x6008             STR      R0,[R1, #+0]
    260                  break;
    261                }
    262              }
    263            }
    264            u8tempcount=20;
   \                     ??UserAppSM_Idle_15: (+1)
   \   000001B4   0x2014             MOVS     R0,#+20
   \   000001B6   0x....             LDR.N    R1,??DataTable4_8
   \   000001B8   0x7008             STRB     R0,[R1, #+0]
    265            }
    266          } /* end UserAppSM_Idle() */
   \                     ??UserAppSM_Idle_4: (+1)
   \   000001BA   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .data, align 1
   \                     ??u8tempcount:
   \   00000000   0x14               DC8 20
    267          
    268          /*funtion select -------------------------------------- */    

   \                                 In section .text, align 4, keep-with-next
    269          static void UserAppSM_SwitchSelect(void)
    270          {
    271            u8TransMessage[0]=~u8TransMessage[0];
   \                     UserAppSM_SwitchSelect: (+1)
   \   00000000   0x....             LDR.N    R0,??DataTable4_5
   \   00000002   0x7800             LDRB     R0,[R0, #+0]
   \   00000004   0x43C0             MVNS     R0,R0
   \   00000006   0x....             LDR.N    R1,??DataTable4_5
   \   00000008   0x7008             STRB     R0,[R1, #+0]
    272            boolcallonce=TRUE;
   \   0000000A   0x2001             MOVS     R0,#+1
   \   0000000C   0x....             LDR.N    R1,??DataTable4_4
   \   0000000E   0x7008             STRB     R0,[R1, #+0]
    273            UserApp_StateMachine = UserAppSM_Idle;
   \   00000010   0x....             LDR.N    R0,??DataTable4_9
   \   00000012   0x....             LDR.N    R1,??DataTable4_3
   \   00000014   0x6008             STR      R0,[R1, #+0]
    274            
    275          }
   \   00000016   0x4770             BX       LR               ;; return
    276          /*------------------------------------------------------*/

   \                                 In section .text, align 4, keep-with-next
    277          static void UserAppSM_FuntionhSelect(void)
    278          {
   \                     UserAppSM_FuntionhSelect: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    279            static u8 u8Funtion1SubMenu[]="cool heat comf ";
    280            static u8 u8Funtion2SubMenu[]="arefaction aeration";
    281            while(boolcallonce)
   \                     ??UserAppSM_FuntionhSelect_0: (+1)
   \   00000002   0x....             LDR.N    R0,??DataTable4_4
   \   00000004   0x7800             LDRB     R0,[R0, #+0]
   \   00000006   0x2800             CMP      R0,#+0
   \   00000008   0xD014             BEQ.N    ??UserAppSM_FuntionhSelect_1
    282            {
    283              LCDCommand(LCD_CLEAR_CMD);
   \   0000000A   0x2001             MOVS     R0,#+1
   \   0000000C   0x.... 0x....      BL       LCDCommand
    284              LCDMessage(LINE1_START_ADDR,u8Funtion1SubMenu);
   \   00000010   0x....             LDR.N    R1,??DataTable4_10
   \   00000012   0x2000             MOVS     R0,#+0
   \   00000014   0x.... 0x....      BL       LCDMessage
    285              LCDMessage(LINE2_START_ADDR,u8Funtion2SubMenu);
   \   00000018   0x....             LDR.N    R1,??DataTable4_11
   \   0000001A   0x2040             MOVS     R0,#+64
   \   0000001C   0x.... 0x....      BL       LCDMessage
    286              boolcallonce=FALSE;
   \   00000020   0x2000             MOVS     R0,#+0
   \   00000022   0x....             LDR.N    R1,??DataTable4_4
   \   00000024   0x7008             STRB     R0,[R1, #+0]
    287              LCDCommand(LCD_HOME_CMD);  
   \   00000026   0x2002             MOVS     R0,#+2
   \   00000028   0x.... 0x....      BL       LCDCommand
    288              UserApp_CursorPosition=0x00;
   \   0000002C   0x2000             MOVS     R0,#+0
   \   0000002E   0x....             LDR.N    R1,??DataTable4_2
   \   00000030   0x7008             STRB     R0,[R1, #+0]
   \   00000032   0xE7E6             B.N      ??UserAppSM_FuntionhSelect_0
    289            }
    290            if(WasButtonPressed(BUTTON1))
   \                     ??UserAppSM_FuntionhSelect_1: (+1)
   \   00000034   0x2001             MOVS     R0,#+1
   \   00000036   0x.... 0x....      BL       WasButtonPressed
   \   0000003A   0x2800             CMP      R0,#+0
   \   0000003C   0xD028             BEQ.N    ??UserAppSM_FuntionhSelect_2
    291            {
    292              ButtonAcknowledge(BUTTON1);
   \   0000003E   0x2001             MOVS     R0,#+1
   \   00000040   0x.... 0x....      BL       ButtonAcknowledge
    293              
    294              /* Handle the two special cases or just the regular case */
    295              if(UserApp_CursorPosition == (LINE1_END_ADDR-9))
   \   00000044   0x....             LDR.N    R0,??DataTable4_2
   \   00000046   0x7800             LDRB     R0,[R0, #+0]
   \   00000048   0x280A             CMP      R0,#+10
   \   0000004A   0xD103             BNE.N    ??UserAppSM_FuntionhSelect_3
    296              {
    297                UserApp_CursorPosition = LINE2_START_ADDR;
   \   0000004C   0x2040             MOVS     R0,#+64
   \   0000004E   0x....             LDR.N    R1,??DataTable4_2
   \   00000050   0x7008             STRB     R0,[R1, #+0]
   \   00000052   0xE016             B.N      ??UserAppSM_FuntionhSelect_4
    298              }
    299          
    300              else if (UserApp_CursorPosition == (LINE2_END_ADDR-8))
   \                     ??UserAppSM_FuntionhSelect_3: (+1)
   \   00000054   0x....             LDR.N    R0,??DataTable4_2
   \   00000056   0x7800             LDRB     R0,[R0, #+0]
   \   00000058   0x284B             CMP      R0,#+75
   \   0000005A   0xD103             BNE.N    ??UserAppSM_FuntionhSelect_5
    301              {
    302                UserApp_CursorPosition = LINE1_START_ADDR;
   \   0000005C   0x2000             MOVS     R0,#+0
   \   0000005E   0x....             LDR.N    R1,??DataTable4_2
   \   00000060   0x7008             STRB     R0,[R1, #+0]
   \   00000062   0xE00E             B.N      ??UserAppSM_FuntionhSelect_4
    303              }
    304              
    305              /* Otherwise just increment one space */
    306              else
    307              {
    308                if(UserApp_CursorPosition>=0x40)
   \                     ??UserAppSM_FuntionhSelect_5: (+1)
   \   00000064   0x....             LDR.N    R0,??DataTable4_2
   \   00000066   0x7800             LDRB     R0,[R0, #+0]
   \   00000068   0x2840             CMP      R0,#+64
   \   0000006A   0xDB05             BLT.N    ??UserAppSM_FuntionhSelect_6
    309                {
    310                  UserApp_CursorPosition+=11;
   \   0000006C   0x....             LDR.N    R0,??DataTable4_2
   \   0000006E   0x7800             LDRB     R0,[R0, #+0]
   \   00000070   0x300B             ADDS     R0,R0,#+11
   \   00000072   0x....             LDR.N    R1,??DataTable4_2
   \   00000074   0x7008             STRB     R0,[R1, #+0]
   \   00000076   0xE004             B.N      ??UserAppSM_FuntionhSelect_4
    311                }
    312                else
    313                {
    314                UserApp_CursorPosition+=5;
   \                     ??UserAppSM_FuntionhSelect_6: (+1)
   \   00000078   0x....             LDR.N    R0,??DataTable4_2
   \   0000007A   0x7800             LDRB     R0,[R0, #+0]
   \   0000007C   0x1D40             ADDS     R0,R0,#+5
   \   0000007E   0x....             LDR.N    R1,??DataTable4_2
   \   00000080   0x7008             STRB     R0,[R1, #+0]
    315                }
    316              }
    317               LCDCommand(LCD_ADDRESS_CMD | UserApp_CursorPosition);
   \                     ??UserAppSM_FuntionhSelect_4: (+1)
   \   00000082   0x....             LDR.N    R0,??DataTable4_2
   \   00000084   0x7800             LDRB     R0,[R0, #+0]
   \   00000086   0xF050 0x0080      ORRS     R0,R0,#0x80
   \   0000008A   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000008C   0x.... 0x....      BL       LCDCommand
    318            }
    319              //button 0 move cursor left ---------------------------------------------
    320              if(WasButtonPressed(BUTTON0))
   \                     ??UserAppSM_FuntionhSelect_2: (+1)
   \   00000090   0x2000             MOVS     R0,#+0
   \   00000092   0x.... 0x....      BL       WasButtonPressed
   \   00000096   0x2800             CMP      R0,#+0
   \   00000098   0xD028             BEQ.N    ??UserAppSM_FuntionhSelect_7
    321            {
    322              ButtonAcknowledge(BUTTON0);
   \   0000009A   0x2000             MOVS     R0,#+0
   \   0000009C   0x.... 0x....      BL       ButtonAcknowledge
    323              
    324              /* Handle the two special cases or just the regular case */
    325              if(UserApp_CursorPosition == LINE1_START_ADDR)
   \   000000A0   0x....             LDR.N    R0,??DataTable4_2
   \   000000A2   0x7800             LDRB     R0,[R0, #+0]
   \   000000A4   0x2800             CMP      R0,#+0
   \   000000A6   0xD103             BNE.N    ??UserAppSM_FuntionhSelect_8
    326              {
    327                UserApp_CursorPosition = LINE2_END_ADDR-8;
   \   000000A8   0x204B             MOVS     R0,#+75
   \   000000AA   0x....             LDR.N    R1,??DataTable4_2
   \   000000AC   0x7008             STRB     R0,[R1, #+0]
   \   000000AE   0xE016             B.N      ??UserAppSM_FuntionhSelect_9
    328              }
    329          
    330              else if (UserApp_CursorPosition == LINE2_START_ADDR)
   \                     ??UserAppSM_FuntionhSelect_8: (+1)
   \   000000B0   0x....             LDR.N    R0,??DataTable4_2
   \   000000B2   0x7800             LDRB     R0,[R0, #+0]
   \   000000B4   0x2840             CMP      R0,#+64
   \   000000B6   0xD103             BNE.N    ??UserAppSM_FuntionhSelect_10
    331              {
    332                UserApp_CursorPosition = LINE1_END_ADDR-9;
   \   000000B8   0x200A             MOVS     R0,#+10
   \   000000BA   0x....             LDR.N    R1,??DataTable4_2
   \   000000BC   0x7008             STRB     R0,[R1, #+0]
   \   000000BE   0xE00E             B.N      ??UserAppSM_FuntionhSelect_9
    333              }
    334              
    335              /* Otherwise just increment one space */
    336              else
    337              {
    338                if(UserApp_CursorPosition>=0x40)
   \                     ??UserAppSM_FuntionhSelect_10: (+1)
   \   000000C0   0x....             LDR.N    R0,??DataTable4_2
   \   000000C2   0x7800             LDRB     R0,[R0, #+0]
   \   000000C4   0x2840             CMP      R0,#+64
   \   000000C6   0xDB05             BLT.N    ??UserAppSM_FuntionhSelect_11
    339                {
    340                  UserApp_CursorPosition-=11;
   \   000000C8   0x....             LDR.N    R0,??DataTable4_2
   \   000000CA   0x7800             LDRB     R0,[R0, #+0]
   \   000000CC   0x380B             SUBS     R0,R0,#+11
   \   000000CE   0x....             LDR.N    R1,??DataTable4_2
   \   000000D0   0x7008             STRB     R0,[R1, #+0]
   \   000000D2   0xE004             B.N      ??UserAppSM_FuntionhSelect_9
    341                }
    342                else
    343                {
    344                UserApp_CursorPosition-=5;
   \                     ??UserAppSM_FuntionhSelect_11: (+1)
   \   000000D4   0x....             LDR.N    R0,??DataTable4_2
   \   000000D6   0x7800             LDRB     R0,[R0, #+0]
   \   000000D8   0x1F40             SUBS     R0,R0,#+5
   \   000000DA   0x....             LDR.N    R1,??DataTable4_2
   \   000000DC   0x7008             STRB     R0,[R1, #+0]
    345                }
    346              }
    347               LCDCommand(LCD_ADDRESS_CMD | UserApp_CursorPosition);
   \                     ??UserAppSM_FuntionhSelect_9: (+1)
   \   000000DE   0x....             LDR.N    R0,??DataTable4_2
   \   000000E0   0x7800             LDRB     R0,[R0, #+0]
   \   000000E2   0xF050 0x0080      ORRS     R0,R0,#0x80
   \   000000E6   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000E8   0x.... 0x....      BL       LCDCommand
    348            }
    349            if(WasButtonPressed(BUTTON2))
   \                     ??UserAppSM_FuntionhSelect_7: (+1)
   \   000000EC   0x2002             MOVS     R0,#+2
   \   000000EE   0x.... 0x....      BL       WasButtonPressed
   \   000000F2   0x2800             CMP      R0,#+0
   \   000000F4   0xD028             BEQ.N    ??UserAppSM_FuntionhSelect_12
    350            {
    351              ButtonAcknowledge(BUTTON2);
   \   000000F6   0x2002             MOVS     R0,#+2
   \   000000F8   0x.... 0x....      BL       ButtonAcknowledge
    352              {
    353                switch(UserApp_CursorPosition)
   \   000000FC   0x....             LDR.N    R0,??DataTable4_2
   \   000000FE   0x7800             LDRB     R0,[R0, #+0]
   \   00000100   0x2800             CMP      R0,#+0
   \   00000102   0xD008             BEQ.N    ??UserAppSM_FuntionhSelect_13
   \   00000104   0x2805             CMP      R0,#+5
   \   00000106   0xD00A             BEQ.N    ??UserAppSM_FuntionhSelect_14
   \   00000108   0x280A             CMP      R0,#+10
   \   0000010A   0xD00C             BEQ.N    ??UserAppSM_FuntionhSelect_15
   \   0000010C   0x2840             CMP      R0,#+64
   \   0000010E   0xD00E             BEQ.N    ??UserAppSM_FuntionhSelect_16
   \   00000110   0x284B             CMP      R0,#+75
   \   00000112   0xD010             BEQ.N    ??UserAppSM_FuntionhSelect_17
   \   00000114   0xE012             B.N      ??UserAppSM_FuntionhSelect_18
    354                {
    355                  case 0x00:
    356                    u8TransMessage[1]=00;
   \                     ??UserAppSM_FuntionhSelect_13: (+1)
   \   00000116   0x2000             MOVS     R0,#+0
   \   00000118   0x....             LDR.N    R1,??DataTable4_5
   \   0000011A   0x7048             STRB     R0,[R1, #+1]
    357                    break;
   \   0000011C   0xE00E             B.N      ??UserAppSM_FuntionhSelect_18
    358                  case 0x05:
    359                    u8TransMessage[1]=01;
   \                     ??UserAppSM_FuntionhSelect_14: (+1)
   \   0000011E   0x2001             MOVS     R0,#+1
   \   00000120   0x....             LDR.N    R1,??DataTable4_5
   \   00000122   0x7048             STRB     R0,[R1, #+1]
    360                    break;
   \   00000124   0xE00A             B.N      ??UserAppSM_FuntionhSelect_18
    361                  case 0x0a:
    362                    u8TransMessage[1]=02;
   \                     ??UserAppSM_FuntionhSelect_15: (+1)
   \   00000126   0x2002             MOVS     R0,#+2
   \   00000128   0x....             LDR.N    R1,??DataTable4_5
   \   0000012A   0x7048             STRB     R0,[R1, #+1]
    363                    break;
   \   0000012C   0xE006             B.N      ??UserAppSM_FuntionhSelect_18
    364                  case 0x40:
    365                    u8TransMessage[1]=03;
   \                     ??UserAppSM_FuntionhSelect_16: (+1)
   \   0000012E   0x2003             MOVS     R0,#+3
   \   00000130   0x....             LDR.N    R1,??DataTable4_5
   \   00000132   0x7048             STRB     R0,[R1, #+1]
    366                    break;
   \   00000134   0xE002             B.N      ??UserAppSM_FuntionhSelect_18
    367                  case 0x4b:
    368                    u8TransMessage[1]=04;
   \                     ??UserAppSM_FuntionhSelect_17: (+1)
   \   00000136   0x2004             MOVS     R0,#+4
   \   00000138   0x....             LDR.N    R1,??DataTable4_5
   \   0000013A   0x7048             STRB     R0,[R1, #+1]
    369                    break;
    370                }
    371                boolcallonce=TRUE;
   \                     ??UserAppSM_FuntionhSelect_18: (+1)
   \   0000013C   0x2001             MOVS     R0,#+1
   \   0000013E   0x....             LDR.N    R1,??DataTable4_4
   \   00000140   0x7008             STRB     R0,[R1, #+0]
    372                UserApp_StateMachine = UserAppSM_Idle;
   \   00000142   0x....             LDR.N    R0,??DataTable4_9
   \   00000144   0x....             LDR.N    R1,??DataTable4_3
   \   00000146   0x6008             STR      R0,[R1, #+0]
    373              }
    374            }
    375          }
   \                     ??UserAppSM_FuntionhSelect_12: (+1)
   \   00000148   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .data, align 4
   \                     ??u8Funtion1SubMenu:
   \   00000000   0x63 0x6F          DC8 "cool heat comf "
   \              0x6F 0x6C    
   \              0x20 0x68    
   \              0x65 0x61    
   \              0x74 0x20    
   \              0x63 0x6F    
   \              0x6D 0x66    
   \              0x20 0x00    

   \                                 In section .data, align 4
   \                     ??u8Funtion2SubMenu:
   \   00000000   0x61 0x72          DC8 "arefaction aeration"
   \              0x65 0x66    
   \              0x61 0x63    
   \              0x74 0x69    
   \              0x6F 0x6E    
   \              0x20 0x61    
   \              0x65 0x72    
   \              0x61 0x74    
   \              0x69 0x6F    
   \              0x6E 0x00    
    376          /*------------------------------------------------------*/

   \                                 In section .text, align 4, keep-with-next
    377          static void UserAppSM_TemperSelect(void)
    378          {
    379            
    380          }
   \                     UserAppSM_TemperSelect: (+1)
   \   00000000   0x4770             BX       LR               ;; return
    381          /*------------------------------------------------------*/

   \                                 In section .text, align 4, keep-with-next
    382          static void UserAppSM_WindSelect(void)
    383          {
    384            
    385          }
   \                     UserAppSM_WindSelect: (+1)
   \   00000000   0x4770             BX       LR               ;; return
    386          /*------------------------------------------------------*/

   \                                 In section .text, align 4, keep-with-next
    387          static void UserAppSM_AutoSelect(void)
    388          {
    389            
    390          }
   \                     UserAppSM_AutoSelect: (+1)
   \   00000000   0x4770             BX       LR               ;; return
    391          /*------------------------------------------------------*/

   \                                 In section .text, align 4, keep-with-next
    392          static void UserAppSM_SleepSelect(void)
    393          {
    394            
    395          }
   \                     UserAppSM_SleepSelect: (+1)
   \   00000000   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4:
   \   00000000   0x........         DC32     u8Funtion1Message

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_1:
   \   00000000   0x........         DC32     u8Funtion2Message

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_2:
   \   00000000   0x........         DC32     UserApp_CursorPosition

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_3:
   \   00000000   0x........         DC32     UserApp_StateMachine

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_4:
   \   00000000   0x........         DC32     boolcallonce

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_5:
   \   00000000   0x........         DC32     u8TransMessage

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_6:
   \   00000000   0x........         DC32     u8off

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_7:
   \   00000000   0x........         DC32     u8on

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_8:
   \   00000000   0x........         DC32     ??u8tempcount

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_9:
   \   00000000   0x........         DC32     UserAppSM_Idle

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_10:
   \   00000000   0x........         DC32     ??u8Funtion1SubMenu

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable4_11:
   \   00000000   0x........         DC32     ??u8Funtion2SubMenu
    396          /*-------------------------------------------------------------------------------------------------------------------*/
    397          /* Handle an error */
    398          static void UserAppSM_Error(void)          
                             ^
Warning[Pe177]: function "UserAppSM_Error" was declared but never referenced

  static u32 UserApp_u32Timeout;                      /* Timeout counter used across states */
             ^
"F:\ѧϰ\EiE\eiegit\dlpro\firmware_mpg_common\application\user_app.c",61  Warning[Pe177]: 
          variable "UserApp_u32Timeout" was declared but never referenced
    399          {
    400            
    401          } /* end UserAppSM_Error() */
    402          
    403          /*-------------------------------------------------------------------------------------------------------------------*/
    404          /* State to sit in if init failed */
    405          static void UserAppSM_FailedInit(void)          
    406          {
    407              
    408          } /* end UserAppSM_FailedInit() */
    409          
    410          
    411          /*--------------------------------------------------------------------------------------------------------------------*/
    412          /* End of File                                                                                                        */
    413          /*--------------------------------------------------------------------------------------------------------------------*/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   UserAppInitialize
         8   -> LCDCommand
         8   -> LCDMessage
       8   UserAppRunActiveState
         8   -- Indirect call
       0   UserAppSM_AutoSelect
       8   UserAppSM_FuntionhSelect
         8   -> ButtonAcknowledge
         8   -> LCDCommand
         8   -> LCDMessage
         8   -> WasButtonPressed
       8   UserAppSM_Idle
         8   -> ButtonAcknowledge
         8   -> LCDCommand
         8   -> LCDMessage
         8   -> WasButtonPressed
       0   UserAppSM_SleepSelect
       0   UserAppSM_SwitchSelect
       0   UserAppSM_TemperSelect
       0   UserAppSM_WindSelect


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable4
       4  ??DataTable4_1
       4  ??DataTable4_10
       4  ??DataTable4_11
       4  ??DataTable4_2
       4  ??DataTable4_3
       4  ??DataTable4_4
       4  ??DataTable4_5
       4  ??DataTable4_6
       4  ??DataTable4_7
       4  ??DataTable4_8
       4  ??DataTable4_9
       4  G_u32UserAppFlags
      60  UserAppInitialize
      12  UserAppRunActiveState
       2  UserAppSM_AutoSelect
     330  UserAppSM_FuntionhSelect
     444  UserAppSM_Idle
       2  UserAppSM_SleepSelect
      24  UserAppSM_SwitchSelect
       2  UserAppSM_TemperSelect
       2  UserAppSM_WindSelect
       1  UserApp_CursorPosition
       4  UserApp_StateMachine
       1  boolcallonce
      24  u8Funtion1Message
      16  u8Funtion1SubMenu
      16  u8Funtion2Message
      20  u8Funtion2SubMenu
       8  u8TransMessage
       4  u8off
       4  u8on
       1  u8tempcount

 
  17 bytes in section .bss
  86 bytes in section .data
 926 bytes in section .text
 
 926 bytes of CODE memory
 103 bytes of DATA memory

Errors: none
Warnings: 4
