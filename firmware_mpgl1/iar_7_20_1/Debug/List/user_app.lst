###############################################################################
#
# IAR ANSI C/C++ Compiler V7.20.1.7305/W32 for ARM        15/Jun/2016  10:32:29
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        F:\ѧϰ\EiE\eiegit\dlpro\firmware_mpg_common\application\user_app.c
#    Command line =  
#        F:\ѧϰ\EiE\eiegit\dlpro\firmware_mpg_common\application\user_app.c -D
#        MPGL1 -D MPG1 --preprocess=cl
#        F:\ѧϰ\EiE\eiegit\dlpro\firmware_mpgl1\iar_7_20_1\Debug\List\ -lC
#        F:\ѧϰ\EiE\eiegit\dlpro\firmware_mpgl1\iar_7_20_1\Debug\List\ -o
#        F:\ѧϰ\EiE\eiegit\dlpro\firmware_mpgl1\iar_7_20_1\Debug\Obj\ --no_cse
#        --no_unroll --no_inline --no_code_motion --no_tbaa --no_clustering
#        --no_scheduling --debug --endian=little --cpu=Cortex-M3 -e --fpu=None
#        --dlib_config F:\elenic\arm\INC\c\DLib_Config_Normal.h -I
#        F:\ѧϰ\EiE\eiegit\dlpro\firmware_mpgl1\iar_7_20_1\ -I
#        F:\ѧϰ\EiE\eiegit\dlpro\firmware_mpgl1\iar_7_20_1\..\bsp\ -I
#        F:\ѧϰ\EiE\eiegit\dlpro\firmware_mpgl1\iar_7_20_1\..\drivers\ -I
#        F:\ѧϰ\EiE\eiegit\dlpro\firmware_mpgl1\iar_7_20_1\..\application\ -I
#        F:\ѧϰ\EiE\eiegit\dlpro\firmware_mpgl1\iar_7_20_1\..\..\firmware_mpg_common\
#        -I
#        F:\ѧϰ\EiE\eiegit\dlpro\firmware_mpgl1\iar_7_20_1\..\..\firmware_mpg_common\application\
#        -I
#        F:\ѧϰ\EiE\eiegit\dlpro\firmware_mpgl1\iar_7_20_1\..\..\firmware_mpg_common\cmsis\
#        -I
#        F:\ѧϰ\EiE\eiegit\dlpro\firmware_mpgl1\iar_7_20_1\..\..\firmware_mpg_common\drivers\
#        -On --use_c++_inline -I F:\elenic\arm\CMSIS\Include\
#    List file    =  
#        F:\ѧϰ\EiE\eiegit\dlpro\firmware_mpgl1\iar_7_20_1\Debug\List\user_app.lst
#    Object file  =  
#        F:\ѧϰ\EiE\eiegit\dlpro\firmware_mpgl1\iar_7_20_1\Debug\Obj\user_app.o
#
###############################################################################

F:\ѧϰ\EiE\eiegit\dlpro\firmware_mpg_common\application\user_app.c
      1          /**********************************************************************************************************************
      2          File: user_app.c                                                                
      3          
      4          ----------------------------------------------------------------------------------------------------------------------
      5          To start a new task using this user_app as a template:
      6           1. Copy both user_app.c and user_app.h to the Application directory
      7           2. Rename the files yournewtaskname.c and yournewtaskname.h
      8           3. Add yournewtaskname.c and yournewtaskname.h to the Application Include and Source groups in the IAR project
      9           4. Use ctrl-h (make sure "Match Case" is checked) to find and replace all instances of "user_app" with "yournewtaskname"
     10           5. Use ctrl-h to find and replace all instances of "UserApp" with "YourNewTaskName"
     11           6. Use ctrl-h to find and replace all instances of "USER_APP" with "YOUR_NEW_TASK_NAME"
     12           7. Add a call to YourNewTaskNameInitialize() in the init section of main
     13           8. Add a call to YourNewTaskNameRunActiveState() in the Super Loop section of main
     14           9. Update yournewtaskname.h per the instructions at the top of yournewtaskname.h
     15          10. Delete this text (between the dashed lines) and update the Description below to describe your task
     16          ----------------------------------------------------------------------------------------------------------------------
     17          
     18          Description:
     19          This is a user_app.c file template 
     20          
     21          ------------------------------------------------------------------------------------------------------------------------
     22          API:
     23          
     24          Public functions:
     25          
     26          
     27          Protected System functions:
     28          void UserAppInitialize(void)
     29          Runs required initialzation for the task.  Should only be called once in main init section.
     30          
     31          void UserAppRunActiveState(void)
     32          Runs current task state.  Should only be called once in main loop.
     33          
     34          
     35          **********************************************************************************************************************/
     36          
     37          #include "configuration.h"

  /**********************************************************************************************************************
                                                                                                                        ^
"F:\ѧϰ\EiE\eiegit\dlpro\firmware_mpg_common\configuration.h",1  Warning[Pa050]: 
          non-native end of line sequence detected (this diagnostic is only
          issued once)
     38          
     39          /***********************************************************************************************************************
     40          Global variable definitions with scope across entire project.
     41          All Global variable names shall start with "G_"
     42          ***********************************************************************************************************************/
     43          /* New variables */

   \                                 In section .bss, align 4
     44          volatile u32 G_u32UserAppFlags;                       /* Global state flags */
   \                     G_u32UserAppFlags:
   \   00000000                      DS8 4
     45          
     46          
     47          /*--------------------------------------------------------------------------------------------------------------------*/
     48          /* Existing variables (defined in other files -- should all contain the "extern" keyword) */
     49          extern volatile u32 G_u32SystemFlags;                  /* From main.c */
     50          extern volatile u32 G_u32ApplicationFlags;             /* From main.c */
     51          
     52          extern volatile u32 G_u32SystemTime1ms;                /* From board-specific source file */
     53          extern volatile u32 G_u32SystemTime1s;                 /* From board-specific source file */
     54          
     55          extern AntSetupDataType G_stAntSetupData;                         /* From ant.c */
     56          
     57          extern u32 G_u32AntApiCurrentDataTimeStamp;                       /* From ant_api.c */
     58          extern AntApplicationMessageType G_eAntApiCurrentMessageClass;    /* From ant_api.c */
     59          extern u8 G_au8AntApiCurrentData[ANT_APPLICATION_MESSAGE_BYTES];  /* From ant_api.c */
     60          
     61          
     62          
     63          /***********************************************************************************************************************
     64          Global variable definitions with scope limited to this local application.
     65          Variable names shall start with "UserApp_" and be declared as static.
     66          ***********************************************************************************************************************/

   \                                 In section .bss, align 4
     67          static fnCode_type UserApp_StateMachine;            /* The state machine function pointer */
   \                     UserApp_StateMachine:
   \   00000000                      DS8 4
     68          static u32 UserApp_u32Timeout;                      /* Timeout counter used across states */

   \                                 In section .bss, align 1
     69          static u8 UserApp_CursorPosition;
   \                     UserApp_CursorPosition:
   \   00000000                      DS8 1

   \                                 In section .data, align 4
     70          static u8 u8TransMessage[8]={0xff,00,16,01,00,0xff,00,00};/*message of signal to control airconditional*/
   \                     u8TransMessage:
   \   00000000   0xFF 0x00          DC8 255, 0, 16, 1, 0, 255, 0, 0
   \              0x10 0x01    
   \              0x00 0xFF    
   \              0x00 0x00    

   \                                 In section .data, align 4
     71          u8 u8on[]="on";
   \                     u8on:
   \   00000000   0x6F 0x6E          DC8 "on"
   \              0x00         
   \   00000003   0x00               DC8 0

   \                                 In section .data, align 4
     72          u8 u8off[]="off";
   \                     u8off:
   \   00000000   0x6F 0x66          DC8 "off"
   \              0x66 0x00    

   \                                 In section .data, align 1
     73          bool boolcallonce=TRUE;
   \                     boolcallonce:
   \   00000000   0x01               DC8 1

   \                                 In section .data, align 4
     74          u8 u8Funtion1Message[]="switch funtio temper";
   \                     u8Funtion1Message:
   \   00000000   0x73 0x77          DC8 "switch funtio temper"
   \              0x69 0x74    
   \              0x63 0x68    
   \              0x20 0x66    
   \              0x75 0x6E    
   \              0x74 0x69    
   \              0x6F 0x20    
   \              0x74 0x65    
   \              0x6D 0x70    
   \              0x65 0x72    
   \              0x00         
   \   00000015   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .data, align 4
     75          u8 u8Funtion2Message[]="wind auto sleep";
   \                     u8Funtion2Message:
   \   00000000   0x77 0x69          DC8 "wind auto sleep"
   \              0x6E 0x64    
   \              0x20 0x61    
   \              0x75 0x74    
   \              0x6F 0x20    
   \              0x73 0x6C    
   \              0x65 0x65    
   \              0x70 0x00    
     76          /**********************************************************************************************************************
     77          Function Definitions
     78          **********************************************************************************************************************/
     79          
     80          /*--------------------------------------------------------------------------------------------------------------------*/
     81          /* Public functions                                                                                                   */
     82          /*--------------------------------------------------------------------------------------------------------------------*/
     83          
     84          
     85          /*--------------------------------------------------------------------------------------------------------------------*/
     86          /* Protected functions                                                                                                */
     87          /*--------------------------------------------------------------------------------------------------------------------*/
     88          
     89          /*--------------------------------------------------------------------------------------------------------------------
     90          Function: UserAppInitialize
     91          
     92          Description:
     93          Initializes the State Machine and its variables.
     94          
     95          Requires:
     96            -
     97          
     98          Promises:
     99            - 
    100          */

   \                                 In section .text, align 2, keep-with-next
    101          void UserAppInitialize(void)
    102          {
   \                     UserAppInitialize: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    103            /* Configure ANT for this application */
    104            G_stAntSetupData.AntChannel          = ANT_CHANNEL_USERAPP;
   \   00000002   0x2000             MOVS     R0,#+0
   \   00000004   0x.... 0x....      LDR.W    R1,??DataTable8
   \   00000008   0x7008             STRB     R0,[R1, #+0]
    105            G_stAntSetupData.AntSerialLo         = ANT_SERIAL_LO_USERAPP;
   \   0000000A   0x2034             MOVS     R0,#+52
   \   0000000C   0x.... 0x....      LDR.W    R1,??DataTable8
   \   00000010   0x70C8             STRB     R0,[R1, #+3]
    106            G_stAntSetupData.AntSerialHi         = ANT_SERIAL_HI_USERAPP;
   \   00000012   0x2012             MOVS     R0,#+18
   \   00000014   0x.... 0x....      LDR.W    R1,??DataTable8
   \   00000018   0x7108             STRB     R0,[R1, #+4]
    107            G_stAntSetupData.AntDeviceType       = ANT_DEVICE_TYPE_USERAPP;
   \   0000001A   0x2001             MOVS     R0,#+1
   \   0000001C   0x.... 0x....      LDR.W    R1,??DataTable8
   \   00000020   0x7148             STRB     R0,[R1, #+5]
    108            G_stAntSetupData.AntTransmissionType = ANT_TRANSMISSION_TYPE_USERAPP;
   \   00000022   0x2001             MOVS     R0,#+1
   \   00000024   0x.... 0x....      LDR.W    R1,??DataTable8
   \   00000028   0x7188             STRB     R0,[R1, #+6]
    109            G_stAntSetupData.AntChannelPeriodLo  = ANT_CHANNEL_PERIOD_LO_USERAPP;
   \   0000002A   0x2000             MOVS     R0,#+0
   \   0000002C   0x.... 0x....      LDR.W    R1,??DataTable8
   \   00000030   0x71C8             STRB     R0,[R1, #+7]
    110            G_stAntSetupData.AntChannelPeriodHi  = ANT_CHANNEL_PERIOD_HI_USERAPP;
   \   00000032   0x2020             MOVS     R0,#+32
   \   00000034   0x.... 0x....      LDR.W    R1,??DataTable8
   \   00000038   0x7208             STRB     R0,[R1, #+8]
    111            G_stAntSetupData.AntFrequency        = ANT_FREQUENCY_USERAPP;
   \   0000003A   0x2032             MOVS     R0,#+50
   \   0000003C   0x.... 0x....      LDR.W    R1,??DataTable8
   \   00000040   0x7248             STRB     R0,[R1, #+9]
    112            G_stAntSetupData.AntTxPower          = ANT_TX_POWER_USERAPP;
   \   00000042   0x2003             MOVS     R0,#+3
   \   00000044   0x.... 0x....      LDR.W    R1,??DataTable8
   \   00000048   0x7288             STRB     R0,[R1, #+10]
    113          
    114            LCDCommand(LCD_HOME_CMD);
   \   0000004A   0x2002             MOVS     R0,#+2
   \   0000004C   0x.... 0x....      BL       LCDCommand
    115            LCDCommand(LCD_DISPLAY_CMD | LCD_DISPLAY_ON | LCD_DISPLAY_CURSOR | LCD_DISPLAY_BLINK);
   \   00000050   0x200F             MOVS     R0,#+15
   \   00000052   0x.... 0x....      BL       LCDCommand
    116            UserApp_CursorPosition = LINE1_START_ADDR;
   \   00000056   0x2000             MOVS     R0,#+0
   \   00000058   0x.... 0x....      LDR.W    R1,??DataTable8_1
   \   0000005C   0x7008             STRB     R0,[R1, #+0]
    117          
    118            /* If good initialization, set state to Idle */
    119            if( AntChannelConfig(ANT_MASTER) )
   \   0000005E   0x2001             MOVS     R0,#+1
   \   00000060   0x.... 0x....      BL       AntChannelConfig
   \   00000064   0x2800             CMP      R0,#+0
   \   00000066   0xD007             BEQ.N    ??UserAppInitialize_0
    120            {
    121              AntOpenChannel();
   \   00000068   0x.... 0x....      BL       AntOpenChannel
    122              UserApp_StateMachine = UserAppSM_Idle;
   \   0000006C   0x.... 0x....      ADR.W    R0,UserAppSM_Idle
   \   00000070   0x.... 0x....      LDR.W    R1,??DataTable8_2
   \   00000074   0x6008             STR      R0,[R1, #+0]
   \   00000076   0xE004             B.N      ??UserAppInitialize_1
    123            }
    124            else
    125            {
    126              /* The task isn't properly initialized, so shut it down and don't run */
    127              UserApp_StateMachine = UserAppSM_FailedInit;
   \                     ??UserAppInitialize_0: (+1)
   \   00000078   0x.... 0x....      ADR.W    R0,UserAppSM_FailedInit
   \   0000007C   0x.... 0x....      LDR.W    R1,??DataTable8_2
   \   00000080   0x6008             STR      R0,[R1, #+0]
    128            }
    129          
    130          
    131          } /* end UserAppInitialize() */
   \                     ??UserAppInitialize_1: (+1)
   \   00000082   0xBD01             POP      {R0,PC}          ;; return
    132          
    133          
    134          /*----------------------------------------------------------------------------------------------------------------------
    135          Function UserAppRunActiveState()
    136          
    137          Description:
    138          Selects and runs one iteration of the current state in the state machine.
    139          All state machines have a TOTAL of 1ms to execute, so on average n state machines
    140          may take 1ms / n to execute.
    141          
    142          Requires:
    143            - State machine function pointer points at current state
    144          
    145          Promises:
    146            - Calls the function to pointed by the state machine function pointer
    147          */

   \                                 In section .text, align 2, keep-with-next
    148          void UserAppRunActiveState(void)
    149          {
   \                     UserAppRunActiveState: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    150            UserApp_StateMachine();
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable8_2
   \   00000006   0x6800             LDR      R0,[R0, #+0]
   \   00000008   0x4780             BLX      R0
    151          
    152          } /* end UserAppRunActiveState */
   \   0000000A   0xBD01             POP      {R0,PC}          ;; return
    153          
    154          
    155          /*--------------------------------------------------------------------------------------------------------------------*/
    156          /* Private functions                                                                                                  */
    157          /*--------------------------------------------------------------------------------------------------------------------*/
    158          
    159          
    160          /**********************************************************************************************************************
    161          State Machine Function Definitions
    162          **********************************************************************************************************************/
    163          
    164          /*-------------------------------------------------------------------------------------------------------------------*/

   \                                 In section .text, align 4, keep-with-next
    165          static void UserAppSM_Idle(void)
    166          {
   \                     UserAppSM_Idle: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    167            //idle state initialization 
    168            while(boolcallonce)
   \                     ??UserAppSM_Idle_0: (+1)
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable8_3
   \   00000006   0x7800             LDRB     R0,[R0, #+0]
   \   00000008   0x2800             CMP      R0,#+0
   \   0000000A   0xD028             BEQ.N    ??UserAppSM_Idle_1
    169            {
    170             UserApp_CursorPosition = LINE1_START_ADDR; 
   \   0000000C   0x2000             MOVS     R0,#+0
   \   0000000E   0x.... 0x....      LDR.W    R1,??DataTable8_1
   \   00000012   0x7008             STRB     R0,[R1, #+0]
    171             LCDCommand(LCD_CLEAR_CMD);
   \   00000014   0x2001             MOVS     R0,#+1
   \   00000016   0x.... 0x....      BL       LCDCommand
    172             LCDMessage(LINE1_START_ADDR,u8Funtion1Message);
   \   0000001A   0x.... 0x....      LDR.W    R1,??DataTable8_4
   \   0000001E   0x2000             MOVS     R0,#+0
   \   00000020   0x.... 0x....      BL       LCDMessage
    173             LCDMessage(LINE2_START_ADDR,u8Funtion2Message);
   \   00000024   0x.... 0x....      LDR.W    R1,??DataTable8_5
   \   00000028   0x2040             MOVS     R0,#+64
   \   0000002A   0x.... 0x....      BL       LCDMessage
    174             if(u8TransMessage[0]==0xff)
   \   0000002E   0x.... 0x....      LDR.W    R0,??DataTable8_6
   \   00000032   0x7800             LDRB     R0,[R0, #+0]
   \   00000034   0x28FF             CMP      R0,#+255
   \   00000036   0xD105             BNE.N    ??UserAppSM_Idle_2
    175             {
    176               LCDMessage(LINE2_START_ADDR+16,u8off);
   \   00000038   0x.... 0x....      LDR.W    R1,??DataTable8_7
   \   0000003C   0x2050             MOVS     R0,#+80
   \   0000003E   0x.... 0x....      BL       LCDMessage
   \   00000042   0xE004             B.N      ??UserAppSM_Idle_3
    177             }
    178             else
    179             {
    180              LCDMessage(LINE2_START_ADDR+16,u8on);
   \                     ??UserAppSM_Idle_2: (+1)
   \   00000044   0x.... 0x....      LDR.W    R1,??DataTable8_8
   \   00000048   0x2050             MOVS     R0,#+80
   \   0000004A   0x.... 0x....      BL       LCDMessage
    181             }
    182            LCDCommand(LCD_HOME_CMD);
   \                     ??UserAppSM_Idle_3: (+1)
   \   0000004E   0x2002             MOVS     R0,#+2
   \   00000050   0x.... 0x....      BL       LCDCommand
    183            boolcallonce=FALSE;
   \   00000054   0x2000             MOVS     R0,#+0
   \   00000056   0x.... 0x....      LDR.W    R1,??DataTable8_3
   \   0000005A   0x7008             STRB     R0,[R1, #+0]
   \   0000005C   0xE7D1             B.N      ??UserAppSM_Idle_0
    184            }
    185            //button 1  move cursor forward ------------------------------------------
    186            if(WasButtonPressed(BUTTON1))
   \                     ??UserAppSM_Idle_1: (+1)
   \   0000005E   0x2001             MOVS     R0,#+1
   \   00000060   0x.... 0x....      BL       WasButtonPressed
   \   00000064   0x2800             CMP      R0,#+0
   \   00000066   0xD032             BEQ.N    ??UserAppSM_Idle_4
    187            {
    188              ButtonAcknowledge(BUTTON1);
   \   00000068   0x2001             MOVS     R0,#+1
   \   0000006A   0x.... 0x....      BL       ButtonAcknowledge
    189              
    190              /* Handle the two special cases or just the regular case */
    191              if(UserApp_CursorPosition == (LINE1_END_ADDR-5))
   \   0000006E   0x.... 0x....      LDR.W    R0,??DataTable8_1
   \   00000072   0x7800             LDRB     R0,[R0, #+0]
   \   00000074   0x280E             CMP      R0,#+14
   \   00000076   0xD104             BNE.N    ??UserAppSM_Idle_5
    192              {
    193                UserApp_CursorPosition = LINE2_START_ADDR;
   \   00000078   0x2040             MOVS     R0,#+64
   \   0000007A   0x.... 0x....      LDR.W    R1,??DataTable8_1
   \   0000007E   0x7008             STRB     R0,[R1, #+0]
   \   00000080   0xE01D             B.N      ??UserAppSM_Idle_6
    194              }
    195          
    196              else if (UserApp_CursorPosition == (LINE2_END_ADDR-9))
   \                     ??UserAppSM_Idle_5: (+1)
   \   00000082   0x.... 0x....      LDR.W    R0,??DataTable8_1
   \   00000086   0x7800             LDRB     R0,[R0, #+0]
   \   00000088   0x284A             CMP      R0,#+74
   \   0000008A   0xD104             BNE.N    ??UserAppSM_Idle_7
    197              {
    198                UserApp_CursorPosition = LINE1_START_ADDR;
   \   0000008C   0x2000             MOVS     R0,#+0
   \   0000008E   0x.... 0x....      LDR.W    R1,??DataTable8_1
   \   00000092   0x7008             STRB     R0,[R1, #+0]
   \   00000094   0xE013             B.N      ??UserAppSM_Idle_6
    199              }
    200              
    201              /* Otherwise just increment  */
    202              else
    203              {
    204                if(UserApp_CursorPosition>=0x40)
   \                     ??UserAppSM_Idle_7: (+1)
   \   00000096   0x.... 0x....      LDR.W    R0,??DataTable8_1
   \   0000009A   0x7800             LDRB     R0,[R0, #+0]
   \   0000009C   0x2840             CMP      R0,#+64
   \   0000009E   0xDB07             BLT.N    ??UserAppSM_Idle_8
    205                {
    206                  UserApp_CursorPosition+=5;
   \   000000A0   0x.... 0x....      LDR.W    R0,??DataTable8_1
   \   000000A4   0x7800             LDRB     R0,[R0, #+0]
   \   000000A6   0x1D40             ADDS     R0,R0,#+5
   \   000000A8   0x.... 0x....      LDR.W    R1,??DataTable8_1
   \   000000AC   0x7008             STRB     R0,[R1, #+0]
   \   000000AE   0xE006             B.N      ??UserAppSM_Idle_6
    207                }
    208                else
    209                {
    210                  UserApp_CursorPosition+=7;
   \                     ??UserAppSM_Idle_8: (+1)
   \   000000B0   0x.... 0x....      LDR.W    R0,??DataTable8_1
   \   000000B4   0x7800             LDRB     R0,[R0, #+0]
   \   000000B6   0x1DC0             ADDS     R0,R0,#+7
   \   000000B8   0x.... 0x....      LDR.W    R1,??DataTable8_1
   \   000000BC   0x7008             STRB     R0,[R1, #+0]
    211                }
    212              }
    213               LCDCommand(LCD_ADDRESS_CMD | UserApp_CursorPosition);
   \                     ??UserAppSM_Idle_6: (+1)
   \   000000BE   0x.... 0x....      LDR.W    R0,??DataTable8_1
   \   000000C2   0x7800             LDRB     R0,[R0, #+0]
   \   000000C4   0xF050 0x0080      ORRS     R0,R0,#0x80
   \   000000C8   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000CA   0x.... 0x....      BL       LCDCommand
    214            }
    215              //button 0 move cursor left ---------------------------------------------
    216              if(WasButtonPressed(BUTTON0))
   \                     ??UserAppSM_Idle_4: (+1)
   \   000000CE   0x2000             MOVS     R0,#+0
   \   000000D0   0x.... 0x....      BL       WasButtonPressed
   \   000000D4   0x2800             CMP      R0,#+0
   \   000000D6   0xD032             BEQ.N    ??UserAppSM_Idle_9
    217            {
    218              ButtonAcknowledge(BUTTON0);
   \   000000D8   0x2000             MOVS     R0,#+0
   \   000000DA   0x.... 0x....      BL       ButtonAcknowledge
    219              
    220              /* Handle the two special cases or just the regular case */
    221              if(UserApp_CursorPosition == LINE1_START_ADDR)
   \   000000DE   0x.... 0x....      LDR.W    R0,??DataTable8_1
   \   000000E2   0x7800             LDRB     R0,[R0, #+0]
   \   000000E4   0x2800             CMP      R0,#+0
   \   000000E6   0xD104             BNE.N    ??UserAppSM_Idle_10
    222              {
    223                UserApp_CursorPosition = LINE2_END_ADDR-9;
   \   000000E8   0x204A             MOVS     R0,#+74
   \   000000EA   0x.... 0x....      LDR.W    R1,??DataTable8_1
   \   000000EE   0x7008             STRB     R0,[R1, #+0]
   \   000000F0   0xE01D             B.N      ??UserAppSM_Idle_11
    224              }
    225          
    226              else if (UserApp_CursorPosition == LINE2_START_ADDR)
   \                     ??UserAppSM_Idle_10: (+1)
   \   000000F2   0x.... 0x....      LDR.W    R0,??DataTable8_1
   \   000000F6   0x7800             LDRB     R0,[R0, #+0]
   \   000000F8   0x2840             CMP      R0,#+64
   \   000000FA   0xD104             BNE.N    ??UserAppSM_Idle_12
    227              {
    228                UserApp_CursorPosition = LINE1_END_ADDR-5;
   \   000000FC   0x200E             MOVS     R0,#+14
   \   000000FE   0x.... 0x....      LDR.W    R1,??DataTable8_1
   \   00000102   0x7008             STRB     R0,[R1, #+0]
   \   00000104   0xE013             B.N      ??UserAppSM_Idle_11
    229              }
    230              
    231              /*cursor move*/
    232              else
    233              {
    234                if(UserApp_CursorPosition>=0x40)
   \                     ??UserAppSM_Idle_12: (+1)
   \   00000106   0x.... 0x....      LDR.W    R0,??DataTable8_1
   \   0000010A   0x7800             LDRB     R0,[R0, #+0]
   \   0000010C   0x2840             CMP      R0,#+64
   \   0000010E   0xDB07             BLT.N    ??UserAppSM_Idle_13
    235                {
    236                  UserApp_CursorPosition-=5;
   \   00000110   0x.... 0x....      LDR.W    R0,??DataTable8_1
   \   00000114   0x7800             LDRB     R0,[R0, #+0]
   \   00000116   0x1F40             SUBS     R0,R0,#+5
   \   00000118   0x.... 0x....      LDR.W    R1,??DataTable8_1
   \   0000011C   0x7008             STRB     R0,[R1, #+0]
   \   0000011E   0xE006             B.N      ??UserAppSM_Idle_11
    237                }
    238                else
    239                {
    240                UserApp_CursorPosition-=7;
   \                     ??UserAppSM_Idle_13: (+1)
   \   00000120   0x.... 0x....      LDR.W    R0,??DataTable8_1
   \   00000124   0x7800             LDRB     R0,[R0, #+0]
   \   00000126   0x1FC0             SUBS     R0,R0,#+7
   \   00000128   0x.... 0x....      LDR.W    R1,??DataTable8_1
   \   0000012C   0x7008             STRB     R0,[R1, #+0]
    241                }
    242              }
    243               LCDCommand(LCD_ADDRESS_CMD | UserApp_CursorPosition);
   \                     ??UserAppSM_Idle_11: (+1)
   \   0000012E   0x.... 0x....      LDR.W    R0,??DataTable8_1
   \   00000132   0x7800             LDRB     R0,[R0, #+0]
   \   00000134   0xF050 0x0080      ORRS     R0,R0,#0x80
   \   00000138   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000013A   0x.... 0x....      BL       LCDCommand
    244            }
    245            /*button2 confirm the selection*/
    246            if(WasButtonPressed(BUTTON2))
   \                     ??UserAppSM_Idle_9: (+1)
   \   0000013E   0x2002             MOVS     R0,#+2
   \   00000140   0x.... 0x....      BL       WasButtonPressed
   \   00000144   0x2800             CMP      R0,#+0
   \   00000146   0xD05D             BEQ.N    ??UserAppSM_Idle_14
    247            {
    248              ButtonAcknowledge(BUTTON2);
   \   00000148   0x2002             MOVS     R0,#+2
   \   0000014A   0x.... 0x....      BL       ButtonAcknowledge
    249              { 
    250                /*enter different modules*/
    251                switch(UserApp_CursorPosition)
   \   0000014E   0x.... 0x....      LDR.W    R0,??DataTable8_1
   \   00000152   0x7800             LDRB     R0,[R0, #+0]
   \   00000154   0x2800             CMP      R0,#+0
   \   00000156   0xD00A             BEQ.N    ??UserAppSM_Idle_15
   \   00000158   0x2807             CMP      R0,#+7
   \   0000015A   0xD012             BEQ.N    ??UserAppSM_Idle_16
   \   0000015C   0x280E             CMP      R0,#+14
   \   0000015E   0xD01A             BEQ.N    ??UserAppSM_Idle_17
   \   00000160   0x2840             CMP      R0,#+64
   \   00000162   0xD022             BEQ.N    ??UserAppSM_Idle_18
   \   00000164   0x2845             CMP      R0,#+69
   \   00000166   0xD02A             BEQ.N    ??UserAppSM_Idle_19
   \   00000168   0x284A             CMP      R0,#+74
   \   0000016A   0xD032             BEQ.N    ??UserAppSM_Idle_20
   \   0000016C   0xE03B             B.N      ??UserAppSM_Idle_21
    252                {
    253                  case 0x00:
    254                    boolcallonce=TRUE;
   \                     ??UserAppSM_Idle_15: (+1)
   \   0000016E   0x2001             MOVS     R0,#+1
   \   00000170   0x.... 0x....      LDR.W    R1,??DataTable8_3
   \   00000174   0x7008             STRB     R0,[R1, #+0]
    255                    UserApp_StateMachine = UserAppSM_SwitchSelect;         
   \   00000176   0x.... 0x....      ADR.W    R0,UserAppSM_SwitchSelect
   \   0000017A   0x.... 0x....      LDR.W    R1,??DataTable8_2
   \   0000017E   0x6008             STR      R0,[R1, #+0]
    256                  break;
   \   00000180   0xE040             B.N      ??UserAppSM_Idle_14
    257                  case 0x07:
    258                    boolcallonce=TRUE;
   \                     ??UserAppSM_Idle_16: (+1)
   \   00000182   0x2001             MOVS     R0,#+1
   \   00000184   0x.... 0x....      LDR.W    R1,??DataTable8_3
   \   00000188   0x7008             STRB     R0,[R1, #+0]
    259                    UserApp_StateMachine = UserAppSM_FuntionSelect;          
   \   0000018A   0x.... 0x....      ADR.W    R0,UserAppSM_FuntionSelect
   \   0000018E   0x.... 0x....      LDR.W    R1,??DataTable8_2
   \   00000192   0x6008             STR      R0,[R1, #+0]
    260                  break;
   \   00000194   0xE036             B.N      ??UserAppSM_Idle_14
    261                  case 0x0e:
    262                    boolcallonce=TRUE;
   \                     ??UserAppSM_Idle_17: (+1)
   \   00000196   0x2001             MOVS     R0,#+1
   \   00000198   0x.... 0x....      LDR.W    R1,??DataTable8_3
   \   0000019C   0x7008             STRB     R0,[R1, #+0]
    263                    UserApp_StateMachine = UserAppSM_TemperSelect;        
   \   0000019E   0x.... 0x....      ADR.W    R0,UserAppSM_TemperSelect
   \   000001A2   0x.... 0x....      LDR.W    R1,??DataTable8_2
   \   000001A6   0x6008             STR      R0,[R1, #+0]
    264                  break;
   \   000001A8   0xE02C             B.N      ??UserAppSM_Idle_14
    265                  case 0x40:
    266                    boolcallonce=TRUE;
   \                     ??UserAppSM_Idle_18: (+1)
   \   000001AA   0x2001             MOVS     R0,#+1
   \   000001AC   0x.... 0x....      LDR.W    R1,??DataTable8_3
   \   000001B0   0x7008             STRB     R0,[R1, #+0]
    267                    UserApp_StateMachine = UserAppSM_WindSelect;         
   \   000001B2   0x.... 0x....      ADR.W    R0,UserAppSM_WindSelect
   \   000001B6   0x.... 0x....      LDR.W    R1,??DataTable8_2
   \   000001BA   0x6008             STR      R0,[R1, #+0]
    268                  break;
   \   000001BC   0xE022             B.N      ??UserAppSM_Idle_14
    269                  case 0x45:
    270                    boolcallonce=TRUE;
   \                     ??UserAppSM_Idle_19: (+1)
   \   000001BE   0x2001             MOVS     R0,#+1
   \   000001C0   0x.... 0x....      LDR.W    R1,??DataTable8_3
   \   000001C4   0x7008             STRB     R0,[R1, #+0]
    271                    UserApp_StateMachine = UserAppSM_AutoSelect;       
   \   000001C6   0x.... 0x....      ADR.W    R0,UserAppSM_AutoSelect
   \   000001CA   0x.... 0x....      LDR.W    R1,??DataTable8_2
   \   000001CE   0x6008             STR      R0,[R1, #+0]
    272                  break;
   \   000001D0   0xE018             B.N      ??UserAppSM_Idle_14
    273                  case 0x4a:
    274                    boolcallonce=TRUE;
   \                     ??UserAppSM_Idle_20: (+1)
   \   000001D2   0x2001             MOVS     R0,#+1
   \   000001D4   0x.... 0x....      LDR.W    R1,??DataTable8_3
   \   000001D8   0x7008             STRB     R0,[R1, #+0]
    275                    UserApp_StateMachine = UserAppSM_SleepSelect;
   \   000001DA   0x.... 0x....      ADR.W    R0,UserAppSM_SleepSelect
   \   000001DE   0x.... 0x....      LDR.W    R1,??DataTable8_2
   \   000001E2   0x6008             STR      R0,[R1, #+0]
    276                  break;
   \   000001E4   0xE00E             B.N      ??UserAppSM_Idle_14
    277                 default:
    278                   LCDCommand(LCD_CLEAR_CMD);
   \                     ??UserAppSM_Idle_21: (+1)
   \   000001E6   0x2001             MOVS     R0,#+1
   \   000001E8   0x.... 0x....      BL       LCDCommand
    279                   LCDCommand(LCD_ADDRESS_CMD | UserApp_CursorPosition);
   \   000001EC   0x.... 0x....      LDR.W    R0,??DataTable8_1
   \   000001F0   0x7800             LDRB     R0,[R0, #+0]
   \   000001F2   0xF050 0x0080      ORRS     R0,R0,#0x80
   \   000001F6   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000001F8   0x.... 0x....      BL       LCDCommand
    280                   UserApp_CursorPosition = LINE1_START_ADDR;
   \   000001FC   0x2000             MOVS     R0,#+0
   \   000001FE   0x.... 0x....      LDR.W    R1,??DataTable8_1
   \   00000202   0x7008             STRB     R0,[R1, #+0]
    281                }
    282              }
    283            }
    284            /*transmit message to slave*/
    285            if( AntReadData() )
   \                     ??UserAppSM_Idle_14: (+1)
   \   00000204   0x.... 0x....      BL       AntReadData
   \   00000208   0x2800             CMP      R0,#+0
   \   0000020A   0xD00D             BEQ.N    ??UserAppSM_Idle_22
    286            {
    287               /* New data message: check what it is */
    288              if(G_eAntApiCurrentMessageClass == ANT_DATA)
   \   0000020C   0x.... 0x....      LDR.W    R0,??DataTable8_9
   \   00000210   0x7800             LDRB     R0,[R0, #+0]
   \   00000212   0x2801             CMP      R0,#+1
   \   00000214   0xD008             BEQ.N    ??UserAppSM_Idle_22
    289              {
    290                /* We got some data */
    291              }
    292              else if(G_eAntApiCurrentMessageClass == ANT_TICK)
   \   00000216   0x.... 0x....      LDR.W    R0,??DataTable8_9
   \   0000021A   0x7800             LDRB     R0,[R0, #+0]
   \   0000021C   0x2802             CMP      R0,#+2
   \   0000021E   0xD103             BNE.N    ??UserAppSM_Idle_22
    293              {
    294               /* A channel period has gone by: typically this is when new data should be queued to be sent */
    295                AntQueueBroadcastMessage(u8TransMessage);
   \   00000220   0x.... 0x....      LDR.W    R0,??DataTable8_6
   \   00000224   0x.... 0x....      BL       AntQueueBroadcastMessage
    296              }
    297            } /* end AntReadData() */
    298          
    299          } /* end UserAppSM_Idle() */
   \                     ??UserAppSM_Idle_22: (+1)
   \   00000228   0xBD01             POP      {R0,PC}          ;; return
    300          
    301          /*  switch moudle---------------------------------------*/
    302          /*----------------------------------------------------- */    

   \                                 In section .text, align 4, keep-with-next
    303          static void UserAppSM_SwitchSelect(void)
    304          {
    305            
    306            u8TransMessage[0]=~u8TransMessage[0];
   \                     UserAppSM_SwitchSelect: (+1)
   \   00000000   0x.... 0x....      LDR.W    R0,??DataTable8_6
   \   00000004   0x7800             LDRB     R0,[R0, #+0]
   \   00000006   0x43C0             MVNS     R0,R0
   \   00000008   0x.... 0x....      LDR.W    R1,??DataTable8_6
   \   0000000C   0x7008             STRB     R0,[R1, #+0]
    307            boolcallonce=TRUE;
   \   0000000E   0x2001             MOVS     R0,#+1
   \   00000010   0x.... 0x....      LDR.W    R1,??DataTable8_3
   \   00000014   0x7008             STRB     R0,[R1, #+0]
    308            UserApp_StateMachine = UserAppSM_Idle;
   \   00000016   0x.... 0x....      LDR.W    R0,??DataTable8_10
   \   0000001A   0x.... 0x....      LDR.W    R1,??DataTable8_2
   \   0000001E   0x6008             STR      R0,[R1, #+0]
    309            
    310          }
   \   00000020   0x4770             BX       LR               ;; return
    311          
    312          /*funtion select moudle---------------------------------*/
    313          /*------------------------------------------------------*/

   \                                 In section .text, align 4, keep-with-next
    314          static void UserAppSM_FuntionSelect(void)
    315          {
   \                     UserAppSM_FuntionSelect: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    316            static u8 u8Funtion1SubMenu[]="cool heat comf ";
    317            static u8 u8Funtion2SubMenu[]="arefaction aeration";
    318            /*moudle initialize*/
    319            while(boolcallonce)
   \                     ??UserAppSM_FuntionSelect_0: (+1)
   \   00000002   0x.... 0x....      LDR.W    R0,??DataTable8_3
   \   00000006   0x7800             LDRB     R0,[R0, #+0]
   \   00000008   0x2800             CMP      R0,#+0
   \   0000000A   0xD018             BEQ.N    ??UserAppSM_FuntionSelect_1
    320            {
    321              LCDCommand(LCD_CLEAR_CMD);
   \   0000000C   0x2001             MOVS     R0,#+1
   \   0000000E   0x.... 0x....      BL       LCDCommand
    322              LCDMessage(LINE1_START_ADDR,u8Funtion1SubMenu);
   \   00000012   0x.... 0x....      LDR.W    R1,??DataTable8_11
   \   00000016   0x2000             MOVS     R0,#+0
   \   00000018   0x.... 0x....      BL       LCDMessage
    323              LCDMessage(LINE2_START_ADDR,u8Funtion2SubMenu);
   \   0000001C   0x.... 0x....      LDR.W    R1,??DataTable8_12
   \   00000020   0x2040             MOVS     R0,#+64
   \   00000022   0x.... 0x....      BL       LCDMessage
    324              boolcallonce=FALSE;
   \   00000026   0x2000             MOVS     R0,#+0
   \   00000028   0x.... 0x....      LDR.W    R1,??DataTable8_3
   \   0000002C   0x7008             STRB     R0,[R1, #+0]
    325              LCDCommand(LCD_HOME_CMD);  
   \   0000002E   0x2002             MOVS     R0,#+2
   \   00000030   0x.... 0x....      BL       LCDCommand
    326              UserApp_CursorPosition=0x00;
   \   00000034   0x2000             MOVS     R0,#+0
   \   00000036   0x.... 0x....      LDR.W    R1,??DataTable8_1
   \   0000003A   0x7008             STRB     R0,[R1, #+0]
   \   0000003C   0xE7E1             B.N      ??UserAppSM_FuntionSelect_0
    327            }
    328            /*move cursor to select different funtions---------------------
    329            and button1 moves cursor to right button2 moves cursor to left*/
    330            if(WasButtonPressed(BUTTON1))
   \                     ??UserAppSM_FuntionSelect_1: (+1)
   \   0000003E   0x2001             MOVS     R0,#+1
   \   00000040   0x.... 0x....      BL       WasButtonPressed
   \   00000044   0x2800             CMP      R0,#+0
   \   00000046   0xD032             BEQ.N    ??UserAppSM_FuntionSelect_2
    331            {
    332              ButtonAcknowledge(BUTTON1);
   \   00000048   0x2001             MOVS     R0,#+1
   \   0000004A   0x.... 0x....      BL       ButtonAcknowledge
    333              
    334              /* Handle the two special cases or just the regular case */
    335              if(UserApp_CursorPosition == (LINE1_END_ADDR-9))
   \   0000004E   0x.... 0x....      LDR.W    R0,??DataTable8_1
   \   00000052   0x7800             LDRB     R0,[R0, #+0]
   \   00000054   0x280A             CMP      R0,#+10
   \   00000056   0xD104             BNE.N    ??UserAppSM_FuntionSelect_3
    336              {
    337                UserApp_CursorPosition = LINE2_START_ADDR;
   \   00000058   0x2040             MOVS     R0,#+64
   \   0000005A   0x.... 0x....      LDR.W    R1,??DataTable8_1
   \   0000005E   0x7008             STRB     R0,[R1, #+0]
   \   00000060   0xE01D             B.N      ??UserAppSM_FuntionSelect_4
    338              }
    339          
    340              else if (UserApp_CursorPosition == (LINE2_END_ADDR-8))
   \                     ??UserAppSM_FuntionSelect_3: (+1)
   \   00000062   0x.... 0x....      LDR.W    R0,??DataTable8_1
   \   00000066   0x7800             LDRB     R0,[R0, #+0]
   \   00000068   0x284B             CMP      R0,#+75
   \   0000006A   0xD104             BNE.N    ??UserAppSM_FuntionSelect_5
    341              {
    342                UserApp_CursorPosition = LINE1_START_ADDR;
   \   0000006C   0x2000             MOVS     R0,#+0
   \   0000006E   0x.... 0x....      LDR.W    R1,??DataTable8_1
   \   00000072   0x7008             STRB     R0,[R1, #+0]
   \   00000074   0xE013             B.N      ??UserAppSM_FuntionSelect_4
    343              }
    344              
    345              /* Otherwise just increment one space */
    346              /*the length of cursor moved decided by dinfferent strings*/
    347              else
    348              {
    349                //the cursor is in the second line
    350                if(UserApp_CursorPosition>=0x40)
   \                     ??UserAppSM_FuntionSelect_5: (+1)
   \   00000076   0x.... 0x....      LDR.W    R0,??DataTable8_1
   \   0000007A   0x7800             LDRB     R0,[R0, #+0]
   \   0000007C   0x2840             CMP      R0,#+64
   \   0000007E   0xDB07             BLT.N    ??UserAppSM_FuntionSelect_6
    351                {
    352                  UserApp_CursorPosition+=11;
   \   00000080   0x.... 0x....      LDR.W    R0,??DataTable8_1
   \   00000084   0x7800             LDRB     R0,[R0, #+0]
   \   00000086   0x300B             ADDS     R0,R0,#+11
   \   00000088   0x.... 0x....      LDR.W    R1,??DataTable8_1
   \   0000008C   0x7008             STRB     R0,[R1, #+0]
   \   0000008E   0xE006             B.N      ??UserAppSM_FuntionSelect_4
    353                }
    354                //the cursor is in first line
    355                else
    356                {
    357                UserApp_CursorPosition+=5;
   \                     ??UserAppSM_FuntionSelect_6: (+1)
   \   00000090   0x.... 0x....      LDR.W    R0,??DataTable8_1
   \   00000094   0x7800             LDRB     R0,[R0, #+0]
   \   00000096   0x1D40             ADDS     R0,R0,#+5
   \   00000098   0x.... 0x....      LDR.W    R1,??DataTable8_1
   \   0000009C   0x7008             STRB     R0,[R1, #+0]
    358                }
    359              }
    360               LCDCommand(LCD_ADDRESS_CMD | UserApp_CursorPosition);
   \                     ??UserAppSM_FuntionSelect_4: (+1)
   \   0000009E   0x.... 0x....      LDR.W    R0,??DataTable8_1
   \   000000A2   0x7800             LDRB     R0,[R0, #+0]
   \   000000A4   0xF050 0x0080      ORRS     R0,R0,#0x80
   \   000000A8   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   000000AA   0x.... 0x....      BL       LCDCommand
    361            }
    362              //button 0 move cursor left ---------------------------------------------
    363              if(WasButtonPressed(BUTTON0))
   \                     ??UserAppSM_FuntionSelect_2: (+1)
   \   000000AE   0x2000             MOVS     R0,#+0
   \   000000B0   0x.... 0x....      BL       WasButtonPressed
   \   000000B4   0x2800             CMP      R0,#+0
   \   000000B6   0xD032             BEQ.N    ??UserAppSM_FuntionSelect_7
    364            {
    365              ButtonAcknowledge(BUTTON0);
   \   000000B8   0x2000             MOVS     R0,#+0
   \   000000BA   0x.... 0x....      BL       ButtonAcknowledge
    366              
    367              /* Handle the two special cases or just the regular case */
    368              if(UserApp_CursorPosition == LINE1_START_ADDR)
   \   000000BE   0x.... 0x....      LDR.W    R0,??DataTable8_1
   \   000000C2   0x7800             LDRB     R0,[R0, #+0]
   \   000000C4   0x2800             CMP      R0,#+0
   \   000000C6   0xD104             BNE.N    ??UserAppSM_FuntionSelect_8
    369              {
    370                UserApp_CursorPosition = LINE2_END_ADDR-8;
   \   000000C8   0x204B             MOVS     R0,#+75
   \   000000CA   0x.... 0x....      LDR.W    R1,??DataTable8_1
   \   000000CE   0x7008             STRB     R0,[R1, #+0]
   \   000000D0   0xE01D             B.N      ??UserAppSM_FuntionSelect_9
    371              }
    372          
    373              else if (UserApp_CursorPosition == LINE2_START_ADDR)
   \                     ??UserAppSM_FuntionSelect_8: (+1)
   \   000000D2   0x.... 0x....      LDR.W    R0,??DataTable8_1
   \   000000D6   0x7800             LDRB     R0,[R0, #+0]
   \   000000D8   0x2840             CMP      R0,#+64
   \   000000DA   0xD104             BNE.N    ??UserAppSM_FuntionSelect_10
    374              {
    375                UserApp_CursorPosition = LINE1_END_ADDR-9;
   \   000000DC   0x200A             MOVS     R0,#+10
   \   000000DE   0x.... 0x....      LDR.W    R1,??DataTable8_1
   \   000000E2   0x7008             STRB     R0,[R1, #+0]
   \   000000E4   0xE013             B.N      ??UserAppSM_FuntionSelect_9
    376              }
    377              
    378              /* Otherwise just increment  */
    379              else
    380              {
    381                //the cursor is in the second line
    382                if(UserApp_CursorPosition>=0x40)
   \                     ??UserAppSM_FuntionSelect_10: (+1)
   \   000000E6   0x.... 0x....      LDR.W    R0,??DataTable8_1
   \   000000EA   0x7800             LDRB     R0,[R0, #+0]
   \   000000EC   0x2840             CMP      R0,#+64
   \   000000EE   0xDB07             BLT.N    ??UserAppSM_FuntionSelect_11
    383                {
    384                  UserApp_CursorPosition-=11;
   \   000000F0   0x.... 0x....      LDR.W    R0,??DataTable8_1
   \   000000F4   0x7800             LDRB     R0,[R0, #+0]
   \   000000F6   0x380B             SUBS     R0,R0,#+11
   \   000000F8   0x.... 0x....      LDR.W    R1,??DataTable8_1
   \   000000FC   0x7008             STRB     R0,[R1, #+0]
   \   000000FE   0xE006             B.N      ??UserAppSM_FuntionSelect_9
    385                }
    386                //the cursor is in first line
    387                else
    388                {
    389                UserApp_CursorPosition-=5;
   \                     ??UserAppSM_FuntionSelect_11: (+1)
   \   00000100   0x.... 0x....      LDR.W    R0,??DataTable8_1
   \   00000104   0x7800             LDRB     R0,[R0, #+0]
   \   00000106   0x1F40             SUBS     R0,R0,#+5
   \   00000108   0x.... 0x....      LDR.W    R1,??DataTable8_1
   \   0000010C   0x7008             STRB     R0,[R1, #+0]
    390                }
    391              }
    392               LCDCommand(LCD_ADDRESS_CMD | UserApp_CursorPosition);
   \                     ??UserAppSM_FuntionSelect_9: (+1)
   \   0000010E   0x.... 0x....      LDR.W    R0,??DataTable8_1
   \   00000112   0x7800             LDRB     R0,[R0, #+0]
   \   00000114   0xF050 0x0080      ORRS     R0,R0,#0x80
   \   00000118   0xB2C0             UXTB     R0,R0            ;; ZeroExt  R0,R0,#+24,#+24
   \   0000011A   0x.... 0x....      BL       LCDCommand
    393            }
    394            /*confirm the selection and change the message */
    395            if(WasButtonPressed(BUTTON2))
   \                     ??UserAppSM_FuntionSelect_7: (+1)
   \   0000011E   0x2002             MOVS     R0,#+2
   \   00000120   0x.... 0x....      BL       WasButtonPressed
   \   00000124   0x2800             CMP      R0,#+0
   \   00000126   0xD028             BEQ.N    ??UserAppSM_FuntionSelect_12
    396            {
    397              ButtonAcknowledge(BUTTON2);
   \   00000128   0x2002             MOVS     R0,#+2
   \   0000012A   0x.... 0x....      BL       ButtonAcknowledge
    398              {
    399                switch(UserApp_CursorPosition)
   \   0000012E   0x....             LDR.N    R0,??DataTable8_1
   \   00000130   0x7800             LDRB     R0,[R0, #+0]
   \   00000132   0x2800             CMP      R0,#+0
   \   00000134   0xD008             BEQ.N    ??UserAppSM_FuntionSelect_13
   \   00000136   0x2805             CMP      R0,#+5
   \   00000138   0xD00A             BEQ.N    ??UserAppSM_FuntionSelect_14
   \   0000013A   0x280A             CMP      R0,#+10
   \   0000013C   0xD00C             BEQ.N    ??UserAppSM_FuntionSelect_15
   \   0000013E   0x2840             CMP      R0,#+64
   \   00000140   0xD00E             BEQ.N    ??UserAppSM_FuntionSelect_16
   \   00000142   0x284B             CMP      R0,#+75
   \   00000144   0xD010             BEQ.N    ??UserAppSM_FuntionSelect_17
   \   00000146   0xE012             B.N      ??UserAppSM_FuntionSelect_18
    400                {
    401                  //decide the message content on the basis of cursor position
    402                  case 0x00:
    403                    u8TransMessage[1]=00;
   \                     ??UserAppSM_FuntionSelect_13: (+1)
   \   00000148   0x2000             MOVS     R0,#+0
   \   0000014A   0x....             LDR.N    R1,??DataTable8_6
   \   0000014C   0x7048             STRB     R0,[R1, #+1]
    404                    break;
   \   0000014E   0xE00E             B.N      ??UserAppSM_FuntionSelect_18
    405                  case 0x05:
    406                    u8TransMessage[1]=01;
   \                     ??UserAppSM_FuntionSelect_14: (+1)
   \   00000150   0x2001             MOVS     R0,#+1
   \   00000152   0x....             LDR.N    R1,??DataTable8_6
   \   00000154   0x7048             STRB     R0,[R1, #+1]
    407                    break;
   \   00000156   0xE00A             B.N      ??UserAppSM_FuntionSelect_18
    408                  case 0x0a:
    409                    u8TransMessage[1]=02;
   \                     ??UserAppSM_FuntionSelect_15: (+1)
   \   00000158   0x2002             MOVS     R0,#+2
   \   0000015A   0x....             LDR.N    R1,??DataTable8_6
   \   0000015C   0x7048             STRB     R0,[R1, #+1]
    410                    break;
   \   0000015E   0xE006             B.N      ??UserAppSM_FuntionSelect_18
    411                  case 0x40:
    412                    u8TransMessage[1]=03;
   \                     ??UserAppSM_FuntionSelect_16: (+1)
   \   00000160   0x2003             MOVS     R0,#+3
   \   00000162   0x....             LDR.N    R1,??DataTable8_6
   \   00000164   0x7048             STRB     R0,[R1, #+1]
    413                    break;
   \   00000166   0xE002             B.N      ??UserAppSM_FuntionSelect_18
    414                  case 0x4b:
    415                    u8TransMessage[1]=04;
   \                     ??UserAppSM_FuntionSelect_17: (+1)
   \   00000168   0x2004             MOVS     R0,#+4
   \   0000016A   0x....             LDR.N    R1,??DataTable8_6
   \   0000016C   0x7048             STRB     R0,[R1, #+1]
    416                    break;
    417                }
    418                boolcallonce=TRUE;
   \                     ??UserAppSM_FuntionSelect_18: (+1)
   \   0000016E   0x2001             MOVS     R0,#+1
   \   00000170   0x....             LDR.N    R1,??DataTable8_3
   \   00000172   0x7008             STRB     R0,[R1, #+0]
    419                UserApp_StateMachine = UserAppSM_Idle;
   \   00000174   0x....             LDR.N    R0,??DataTable8_10
   \   00000176   0x....             LDR.N    R1,??DataTable8_2
   \   00000178   0x6008             STR      R0,[R1, #+0]
    420              }
    421            }
    422          }/*end moudle*/
   \                     ??UserAppSM_FuntionSelect_12: (+1)
   \   0000017A   0xBD01             POP      {R0,PC}          ;; return

   \                                 In section .data, align 4
   \                     ??u8Funtion1SubMenu:
   \   00000000   0x63 0x6F          DC8 "cool heat comf "
   \              0x6F 0x6C    
   \              0x20 0x68    
   \              0x65 0x61    
   \              0x74 0x20    
   \              0x63 0x6F    
   \              0x6D 0x66    
   \              0x20 0x00    

   \                                 In section .data, align 4
   \                     ??u8Funtion2SubMenu:
   \   00000000   0x61 0x72          DC8 "arefaction aeration"
   \              0x65 0x66    
   \              0x61 0x63    
   \              0x74 0x69    
   \              0x6F 0x6E    
   \              0x20 0x61    
   \              0x65 0x72    
   \              0x61 0x74    
   \              0x69 0x6F    
   \              0x6E 0x00    
    423          
    424          /*temprature adjust*/
    425          /*------------------------------------------------------*/

   \                                 In section .text, align 4, keep-with-next
    426          static void UserAppSM_TemperSelect(void)
    427          { 
   \                     UserAppSM_TemperSelect: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB085             SUB      SP,SP,#+20
    428          
    429            u8 u8TMessage[]="temprature: ";
   \   00000004   0xA800             ADD      R0,SP,#+0
   \   00000006   0x....             LDR.N    R1,??DataTable8_13
   \   00000008   0x220D             MOVS     R2,#+13
   \   0000000A   0x.... 0x....      BL       __aeabi_memcpy
    430            //buffer to save temperature
    431            static u8 u8TCounterMessage[3]={'1','6','\0'};
    432            //initialization
    433            if(boolcallonce)
   \   0000000E   0x....             LDR.N    R0,??DataTable8_3
   \   00000010   0x7800             LDRB     R0,[R0, #+0]
   \   00000012   0x2800             CMP      R0,#+0
   \   00000014   0xD00D             BEQ.N    ??UserAppSM_TemperSelect_0
    434            {
    435              LCDCommand(LCD_CLEAR_CMD);
   \   00000016   0x2001             MOVS     R0,#+1
   \   00000018   0x.... 0x....      BL       LCDCommand
    436              LCDMessage(LINE1_START_ADDR,u8TMessage);
   \   0000001C   0xA900             ADD      R1,SP,#+0
   \   0000001E   0x2000             MOVS     R0,#+0
   \   00000020   0x.... 0x....      BL       LCDMessage
    437              LCDMessage(LINE2_START_ADDR,u8TCounterMessage);
   \   00000024   0x....             LDR.N    R1,??DataTable8_14
   \   00000026   0x2040             MOVS     R0,#+64
   \   00000028   0x.... 0x....      BL       LCDMessage
    438              boolcallonce=FALSE;
   \   0000002C   0x2000             MOVS     R0,#+0
   \   0000002E   0x....             LDR.N    R1,??DataTable8_3
   \   00000030   0x7008             STRB     R0,[R1, #+0]
    439            }
    440            //button 0and 1 to change temperature
    441            if(WasButtonPressed(BUTTON1))
   \                     ??UserAppSM_TemperSelect_0: (+1)
   \   00000032   0x2001             MOVS     R0,#+1
   \   00000034   0x.... 0x....      BL       WasButtonPressed
   \   00000038   0x2800             CMP      R0,#+0
   \   0000003A   0xD017             BEQ.N    ??UserAppSM_TemperSelect_1
    442            {
    443              ButtonAcknowledge(BUTTON1); 
   \   0000003C   0x2001             MOVS     R0,#+1
   \   0000003E   0x.... 0x....      BL       ButtonAcknowledge
    444              u8TCounterMessage[1]++;
   \   00000042   0x....             LDR.N    R0,??DataTable8_14
   \   00000044   0x7840             LDRB     R0,[R0, #+1]
   \   00000046   0x1C40             ADDS     R0,R0,#+1
   \   00000048   0x....             LDR.N    R1,??DataTable8_14
   \   0000004A   0x7048             STRB     R0,[R1, #+1]
    445              if(u8TCounterMessage[1]==0x3a)
   \   0000004C   0x....             LDR.N    R0,??DataTable8_14
   \   0000004E   0x7840             LDRB     R0,[R0, #+1]
   \   00000050   0x283A             CMP      R0,#+58
   \   00000052   0xD107             BNE.N    ??UserAppSM_TemperSelect_2
    446              {
    447                u8TCounterMessage[1]='0';
   \   00000054   0x2030             MOVS     R0,#+48
   \   00000056   0x....             LDR.N    R1,??DataTable8_14
   \   00000058   0x7048             STRB     R0,[R1, #+1]
    448                u8TCounterMessage[0]++;
   \   0000005A   0x....             LDR.N    R0,??DataTable8_14
   \   0000005C   0x7800             LDRB     R0,[R0, #+0]
   \   0000005E   0x1C40             ADDS     R0,R0,#+1
   \   00000060   0x....             LDR.N    R1,??DataTable8_14
   \   00000062   0x7008             STRB     R0,[R1, #+0]
    449              }
    450              LCDMessage(LINE2_START_ADDR,u8TCounterMessage);
   \                     ??UserAppSM_TemperSelect_2: (+1)
   \   00000064   0x....             LDR.N    R1,??DataTable8_14
   \   00000066   0x2040             MOVS     R0,#+64
   \   00000068   0x.... 0x....      BL       LCDMessage
    451            }
    452            if(WasButtonPressed(BUTTON0))
   \                     ??UserAppSM_TemperSelect_1: (+1)
   \   0000006C   0x2000             MOVS     R0,#+0
   \   0000006E   0x.... 0x....      BL       WasButtonPressed
   \   00000072   0x2800             CMP      R0,#+0
   \   00000074   0xD017             BEQ.N    ??UserAppSM_TemperSelect_3
    453            {
    454              ButtonAcknowledge(BUTTON0);
   \   00000076   0x2000             MOVS     R0,#+0
   \   00000078   0x.... 0x....      BL       ButtonAcknowledge
    455              u8TCounterMessage[1]--;
   \   0000007C   0x....             LDR.N    R0,??DataTable8_14
   \   0000007E   0x7840             LDRB     R0,[R0, #+1]
   \   00000080   0x1E40             SUBS     R0,R0,#+1
   \   00000082   0x....             LDR.N    R1,??DataTable8_14
   \   00000084   0x7048             STRB     R0,[R1, #+1]
    456              if(u8TCounterMessage[1]==0x2f)
   \   00000086   0x....             LDR.N    R0,??DataTable8_14
   \   00000088   0x7840             LDRB     R0,[R0, #+1]
   \   0000008A   0x282F             CMP      R0,#+47
   \   0000008C   0xD107             BNE.N    ??UserAppSM_TemperSelect_4
    457              {
    458                u8TCounterMessage[1]=0x39;
   \   0000008E   0x2039             MOVS     R0,#+57
   \   00000090   0x....             LDR.N    R1,??DataTable8_14
   \   00000092   0x7048             STRB     R0,[R1, #+1]
    459                u8TCounterMessage[0]--;
   \   00000094   0x....             LDR.N    R0,??DataTable8_14
   \   00000096   0x7800             LDRB     R0,[R0, #+0]
   \   00000098   0x1E40             SUBS     R0,R0,#+1
   \   0000009A   0x....             LDR.N    R1,??DataTable8_14
   \   0000009C   0x7008             STRB     R0,[R1, #+0]
    460              }
    461              LCDMessage(LINE2_START_ADDR,u8TCounterMessage);
   \                     ??UserAppSM_TemperSelect_4: (+1)
   \   0000009E   0x....             LDR.N    R1,??DataTable8_14
   \   000000A0   0x2040             MOVS     R0,#+64
   \   000000A2   0x.... 0x....      BL       LCDMessage
    462            }
    463            //confirm order
    464            if(WasButtonPressed(BUTTON2))
   \                     ??UserAppSM_TemperSelect_3: (+1)
   \   000000A6   0x2002             MOVS     R0,#+2
   \   000000A8   0x.... 0x....      BL       WasButtonPressed
   \   000000AC   0x2800             CMP      R0,#+0
   \   000000AE   0xD012             BEQ.N    ??UserAppSM_TemperSelect_5
    465            {
    466              ButtonAcknowledge(BUTTON2);
   \   000000B0   0x2002             MOVS     R0,#+2
   \   000000B2   0x.... 0x....      BL       ButtonAcknowledge
    467           //change message and return to idle
    468              u8TransMessage[2]=(u8TCounterMessage[0]-0x30)*10+u8TCounterMessage[1]-0x30;
   \   000000B6   0x....             LDR.N    R0,??DataTable8_14
   \   000000B8   0x7800             LDRB     R0,[R0, #+0]
   \   000000BA   0x210A             MOVS     R1,#+10
   \   000000BC   0x....             LDR.N    R2,??DataTable8_14
   \   000000BE   0x7852             LDRB     R2,[R2, #+1]
   \   000000C0   0xFB01 0x2000      MLA      R0,R1,R0,R2
   \   000000C4   0x3810             SUBS     R0,R0,#+16
   \   000000C6   0x....             LDR.N    R1,??DataTable8_6
   \   000000C8   0x7088             STRB     R0,[R1, #+2]
    469              boolcallonce=TRUE;
   \   000000CA   0x2001             MOVS     R0,#+1
   \   000000CC   0x....             LDR.N    R1,??DataTable8_3
   \   000000CE   0x7008             STRB     R0,[R1, #+0]
    470              UserApp_StateMachine = UserAppSM_Idle;
   \   000000D0   0x....             LDR.N    R0,??DataTable8_10
   \   000000D2   0x....             LDR.N    R1,??DataTable8_2
   \   000000D4   0x6008             STR      R0,[R1, #+0]
    471            }
    472          
    473          }/*end moudle */
   \                     ??UserAppSM_TemperSelect_5: (+1)
   \   000000D6   0xB005             ADD      SP,SP,#+20
   \   000000D8   0xBD00             POP      {PC}             ;; return

   \                                 In section .data, align 4
   \                     ??u8TCounterMessage:
   \   00000000   0x31 0x36          DC8 49, 54, 0, 0
   \              0x00 0x00    
    474          
    475          
    476          /*windspeed moudle*/
    477          /*------------------------------------------------------*/

   \                                 In section .text, align 4, keep-with-next
    478          static void UserAppSM_WindSelect(void)
    479          {
   \                     UserAppSM_WindSelect: (+1)
   \   00000000   0xB510             PUSH     {R4,LR}
   \   00000002   0xB084             SUB      SP,SP,#+16
    480            u8 u8WMessage[]="windspeed :";
   \   00000004   0xA800             ADD      R0,SP,#+0
   \   00000006   0x....             LDR.N    R1,??DataTable8_15
   \   00000008   0xC91C             LDM      R1!,{R2-R4}
   \   0000000A   0xC01C             STM      R0!,{R2-R4}
   \   0000000C   0x390C             SUBS     R1,R1,#+12
   \   0000000E   0x380C             SUBS     R0,R0,#+12
    481            //buffer to save windspeed
    482           static u8 u8WindSpeed[]="1";
    483            while(boolcallonce)
   \                     ??UserAppSM_WindSelect_0: (+1)
   \   00000010   0x....             LDR.N    R0,??DataTable8_3
   \   00000012   0x7800             LDRB     R0,[R0, #+0]
   \   00000014   0x2800             CMP      R0,#+0
   \   00000016   0xD00E             BEQ.N    ??UserAppSM_WindSelect_1
    484            {
    485              LCDCommand(LCD_CLEAR_CMD);
   \   00000018   0x2001             MOVS     R0,#+1
   \   0000001A   0x.... 0x....      BL       LCDCommand
    486              LCDMessage(LINE1_START_ADDR,u8WMessage);
   \   0000001E   0xA900             ADD      R1,SP,#+0
   \   00000020   0x2000             MOVS     R0,#+0
   \   00000022   0x.... 0x....      BL       LCDMessage
    487              LCDMessage(LINE2_START_ADDR,u8WindSpeed);
   \   00000026   0x....             LDR.N    R1,??DataTable8_16
   \   00000028   0x2040             MOVS     R0,#+64
   \   0000002A   0x.... 0x....      BL       LCDMessage
    488              boolcallonce=FALSE;
   \   0000002E   0x2000             MOVS     R0,#+0
   \   00000030   0x....             LDR.N    R1,??DataTable8_3
   \   00000032   0x7008             STRB     R0,[R1, #+0]
   \   00000034   0xE7EC             B.N      ??UserAppSM_WindSelect_0
    489            }
    490            /*button0 and 1 to change windspeed ----------------
    491            button0 raise windspeed and button1 reduce windspeed
    492            the speed include 1,2,3*/
    493            if(WasButtonPressed(BUTTON1))
   \                     ??UserAppSM_WindSelect_1: (+1)
   \   00000036   0x2001             MOVS     R0,#+1
   \   00000038   0x.... 0x....      BL       WasButtonPressed
   \   0000003C   0x2800             CMP      R0,#+0
   \   0000003E   0xD013             BEQ.N    ??UserAppSM_WindSelect_2
    494            {
    495              ButtonAcknowledge(BUTTON1);
   \   00000040   0x2001             MOVS     R0,#+1
   \   00000042   0x.... 0x....      BL       ButtonAcknowledge
    496              if(u8WindSpeed[0]==0x33)
   \   00000046   0x....             LDR.N    R0,??DataTable8_16
   \   00000048   0x7800             LDRB     R0,[R0, #+0]
   \   0000004A   0x2833             CMP      R0,#+51
   \   0000004C   0xD103             BNE.N    ??UserAppSM_WindSelect_3
    497              {
    498                u8WindSpeed[0]=0x31;
   \   0000004E   0x2031             MOVS     R0,#+49
   \   00000050   0x....             LDR.N    R1,??DataTable8_16
   \   00000052   0x7008             STRB     R0,[R1, #+0]
   \   00000054   0xE004             B.N      ??UserAppSM_WindSelect_4
    499              }
    500              else
    501              {
    502              u8WindSpeed[0]++;
   \                     ??UserAppSM_WindSelect_3: (+1)
   \   00000056   0x....             LDR.N    R0,??DataTable8_16
   \   00000058   0x7800             LDRB     R0,[R0, #+0]
   \   0000005A   0x1C40             ADDS     R0,R0,#+1
   \   0000005C   0x....             LDR.N    R1,??DataTable8_16
   \   0000005E   0x7008             STRB     R0,[R1, #+0]
    503              }
    504              LCDMessage(LINE2_START_ADDR,u8WindSpeed);
   \                     ??UserAppSM_WindSelect_4: (+1)
   \   00000060   0x....             LDR.N    R1,??DataTable8_16
   \   00000062   0x2040             MOVS     R0,#+64
   \   00000064   0x.... 0x....      BL       LCDMessage
    505            }
    506            if(WasButtonPressed(BUTTON0))
   \                     ??UserAppSM_WindSelect_2: (+1)
   \   00000068   0x2000             MOVS     R0,#+0
   \   0000006A   0x.... 0x....      BL       WasButtonPressed
   \   0000006E   0x2800             CMP      R0,#+0
   \   00000070   0xD013             BEQ.N    ??UserAppSM_WindSelect_5
    507            {
    508              ButtonAcknowledge(BUTTON0);
   \   00000072   0x2000             MOVS     R0,#+0
   \   00000074   0x.... 0x....      BL       ButtonAcknowledge
    509              if(u8WindSpeed[0]==0x31)
   \   00000078   0x....             LDR.N    R0,??DataTable8_16
   \   0000007A   0x7800             LDRB     R0,[R0, #+0]
   \   0000007C   0x2831             CMP      R0,#+49
   \   0000007E   0xD103             BNE.N    ??UserAppSM_WindSelect_6
    510              {
    511                u8WindSpeed[0]=0x33;
   \   00000080   0x2033             MOVS     R0,#+51
   \   00000082   0x....             LDR.N    R1,??DataTable8_16
   \   00000084   0x7008             STRB     R0,[R1, #+0]
   \   00000086   0xE004             B.N      ??UserAppSM_WindSelect_7
    512              }
    513              else
    514              {
    515                u8WindSpeed[0]--;
   \                     ??UserAppSM_WindSelect_6: (+1)
   \   00000088   0x....             LDR.N    R0,??DataTable8_16
   \   0000008A   0x7800             LDRB     R0,[R0, #+0]
   \   0000008C   0x1E40             SUBS     R0,R0,#+1
   \   0000008E   0x....             LDR.N    R1,??DataTable8_16
   \   00000090   0x7008             STRB     R0,[R1, #+0]
    516              }
    517              LCDMessage(LINE2_START_ADDR,u8WindSpeed);
   \                     ??UserAppSM_WindSelect_7: (+1)
   \   00000092   0x....             LDR.N    R1,??DataTable8_16
   \   00000094   0x2040             MOVS     R0,#+64
   \   00000096   0x.... 0x....      BL       LCDMessage
    518            }
    519            //change message and return to idle
    520            if(WasButtonPressed(BUTTON2))
   \                     ??UserAppSM_WindSelect_5: (+1)
   \   0000009A   0x2002             MOVS     R0,#+2
   \   0000009C   0x.... 0x....      BL       WasButtonPressed
   \   000000A0   0x2800             CMP      R0,#+0
   \   000000A2   0xD00C             BEQ.N    ??UserAppSM_WindSelect_8
    521            {
    522              ButtonAcknowledge(BUTTON2);
   \   000000A4   0x2002             MOVS     R0,#+2
   \   000000A6   0x.... 0x....      BL       ButtonAcknowledge
    523              {
    524                u8TransMessage[3]=u8WindSpeed[0];
   \   000000AA   0x....             LDR.N    R0,??DataTable8_16
   \   000000AC   0x7800             LDRB     R0,[R0, #+0]
   \   000000AE   0x....             LDR.N    R1,??DataTable8_6
   \   000000B0   0x70C8             STRB     R0,[R1, #+3]
    525                boolcallonce=TRUE;
   \   000000B2   0x2001             MOVS     R0,#+1
   \   000000B4   0x....             LDR.N    R1,??DataTable8_3
   \   000000B6   0x7008             STRB     R0,[R1, #+0]
    526                UserApp_StateMachine = UserAppSM_Idle;
   \   000000B8   0x....             LDR.N    R0,??DataTable8_10
   \   000000BA   0x....             LDR.N    R1,??DataTable8_2
   \   000000BC   0x6008             STR      R0,[R1, #+0]
    527              }
    528            }
    529          }/*end moudle*/
   \                     ??UserAppSM_WindSelect_8: (+1)
   \   000000BE   0xBD1F             POP      {R0-R4,PC}       ;; return

   \                                 In section .data, align 2
   \                     ??u8WindSpeed:
   \   00000000   0x31 0x00          DC8 "1"
    530          
    531          /*timer moudle*/
    532          /*------------------------------------------------------*/

   \                                 In section .text, align 4, keep-with-next
    533          static void UserAppSM_AutoSelect(void)
    534          {
   \                     UserAppSM_AutoSelect: (+1)
   \   00000000   0xB500             PUSH     {LR}
   \   00000002   0xB083             SUB      SP,SP,#+12
    535            u8 u8timing[]="timing:";
   \   00000004   0xA800             ADD      R0,SP,#+0
   \   00000006   0x....             LDR.N    R1,??DataTable8_17
   \   00000008   0xC90C             LDM      R1!,{R2,R3}
   \   0000000A   0xC00C             STM      R0!,{R2,R3}
   \   0000000C   0x3908             SUBS     R1,R1,#+8
   \   0000000E   0x3808             SUBS     R0,R0,#+8
    536            static u8 u8timelast[3]={'0','0','\0'};
    537            //initialize
    538            if(boolcallonce)
   \   00000010   0x....             LDR.N    R0,??DataTable8_3
   \   00000012   0x7800             LDRB     R0,[R0, #+0]
   \   00000014   0x2800             CMP      R0,#+0
   \   00000016   0xD00D             BEQ.N    ??UserAppSM_AutoSelect_0
    539            {
    540              LCDCommand(LCD_CLEAR_CMD);
   \   00000018   0x2001             MOVS     R0,#+1
   \   0000001A   0x.... 0x....      BL       LCDCommand
    541              LCDMessage(LINE1_START_ADDR,u8timing);
   \   0000001E   0xA900             ADD      R1,SP,#+0
   \   00000020   0x2000             MOVS     R0,#+0
   \   00000022   0x.... 0x....      BL       LCDMessage
    542              LCDMessage(LINE2_START_ADDR,u8timelast);
   \   00000026   0x....             LDR.N    R1,??DataTable8_18
   \   00000028   0x2040             MOVS     R0,#+64
   \   0000002A   0x.... 0x....      BL       LCDMessage
    543              boolcallonce=FALSE;
   \   0000002E   0x2000             MOVS     R0,#+0
   \   00000030   0x....             LDR.N    R1,??DataTable8_3
   \   00000032   0x7008             STRB     R0,[R1, #+0]
    544            }
    545            /**/
    546            if(WasButtonPressed(BUTTON1))
   \                     ??UserAppSM_AutoSelect_0: (+1)
   \   00000034   0x2001             MOVS     R0,#+1
   \   00000036   0x.... 0x....      BL       WasButtonPressed
   \   0000003A   0x2800             CMP      R0,#+0
   \   0000003C   0xD017             BEQ.N    ??UserAppSM_AutoSelect_1
    547            {
    548              ButtonAcknowledge(BUTTON1); 
   \   0000003E   0x2001             MOVS     R0,#+1
   \   00000040   0x.... 0x....      BL       ButtonAcknowledge
    549              u8timelast[1]++;
   \   00000044   0x....             LDR.N    R0,??DataTable8_18
   \   00000046   0x7840             LDRB     R0,[R0, #+1]
   \   00000048   0x1C40             ADDS     R0,R0,#+1
   \   0000004A   0x....             LDR.N    R1,??DataTable8_18
   \   0000004C   0x7048             STRB     R0,[R1, #+1]
    550              if(u8timelast[1]==0x3a)
   \   0000004E   0x....             LDR.N    R0,??DataTable8_18
   \   00000050   0x7840             LDRB     R0,[R0, #+1]
   \   00000052   0x283A             CMP      R0,#+58
   \   00000054   0xD107             BNE.N    ??UserAppSM_AutoSelect_2
    551              {
    552                u8timelast[1]='0';
   \   00000056   0x2030             MOVS     R0,#+48
   \   00000058   0x....             LDR.N    R1,??DataTable8_18
   \   0000005A   0x7048             STRB     R0,[R1, #+1]
    553                u8timelast[0]++;
   \   0000005C   0x....             LDR.N    R0,??DataTable8_18
   \   0000005E   0x7800             LDRB     R0,[R0, #+0]
   \   00000060   0x1C40             ADDS     R0,R0,#+1
   \   00000062   0x....             LDR.N    R1,??DataTable8_18
   \   00000064   0x7008             STRB     R0,[R1, #+0]
    554              }
    555              LCDMessage(LINE2_START_ADDR,u8timelast);
   \                     ??UserAppSM_AutoSelect_2: (+1)
   \   00000066   0x....             LDR.N    R1,??DataTable8_18
   \   00000068   0x2040             MOVS     R0,#+64
   \   0000006A   0x.... 0x....      BL       LCDMessage
    556            }
    557            if(WasButtonPressed(BUTTON0))
   \                     ??UserAppSM_AutoSelect_1: (+1)
   \   0000006E   0x2000             MOVS     R0,#+0
   \   00000070   0x.... 0x....      BL       WasButtonPressed
   \   00000074   0x2800             CMP      R0,#+0
   \   00000076   0xD017             BEQ.N    ??UserAppSM_AutoSelect_3
    558            {
    559              ButtonAcknowledge(BUTTON0);
   \   00000078   0x2000             MOVS     R0,#+0
   \   0000007A   0x.... 0x....      BL       ButtonAcknowledge
    560              u8timelast[1]--;
   \   0000007E   0x....             LDR.N    R0,??DataTable8_18
   \   00000080   0x7840             LDRB     R0,[R0, #+1]
   \   00000082   0x1E40             SUBS     R0,R0,#+1
   \   00000084   0x....             LDR.N    R1,??DataTable8_18
   \   00000086   0x7048             STRB     R0,[R1, #+1]
    561              if(u8timelast[1]==0x2f)
   \   00000088   0x....             LDR.N    R0,??DataTable8_18
   \   0000008A   0x7840             LDRB     R0,[R0, #+1]
   \   0000008C   0x282F             CMP      R0,#+47
   \   0000008E   0xD107             BNE.N    ??UserAppSM_AutoSelect_4
    562              {
    563                u8timelast[1]=0x39;
   \   00000090   0x2039             MOVS     R0,#+57
   \   00000092   0x....             LDR.N    R1,??DataTable8_18
   \   00000094   0x7048             STRB     R0,[R1, #+1]
    564                u8timelast[0]--;
   \   00000096   0x....             LDR.N    R0,??DataTable8_18
   \   00000098   0x7800             LDRB     R0,[R0, #+0]
   \   0000009A   0x1E40             SUBS     R0,R0,#+1
   \   0000009C   0x....             LDR.N    R1,??DataTable8_18
   \   0000009E   0x7008             STRB     R0,[R1, #+0]
    565              }
    566              LCDMessage(LINE2_START_ADDR,u8timelast);
   \                     ??UserAppSM_AutoSelect_4: (+1)
   \   000000A0   0x....             LDR.N    R1,??DataTable8_18
   \   000000A2   0x2040             MOVS     R0,#+64
   \   000000A4   0x.... 0x....      BL       LCDMessage
    567            }
    568           if(WasButtonPressed(BUTTON2))
   \                     ??UserAppSM_AutoSelect_3: (+1)
   \   000000A8   0x2002             MOVS     R0,#+2
   \   000000AA   0x.... 0x....      BL       WasButtonPressed
   \   000000AE   0x2800             CMP      R0,#+0
   \   000000B0   0xD012             BEQ.N    ??UserAppSM_AutoSelect_5
    569            {
    570              ButtonAcknowledge(BUTTON2);
   \   000000B2   0x2002             MOVS     R0,#+2
   \   000000B4   0x.... 0x....      BL       ButtonAcknowledge
    571              {
    572                u8TransMessage[4]=(u8timelast[0]-0x30)*10+u8timelast[1]-0x30;;
   \   000000B8   0x....             LDR.N    R0,??DataTable8_18
   \   000000BA   0x7800             LDRB     R0,[R0, #+0]
   \   000000BC   0x210A             MOVS     R1,#+10
   \   000000BE   0x....             LDR.N    R2,??DataTable8_18
   \   000000C0   0x7852             LDRB     R2,[R2, #+1]
   \   000000C2   0xFB01 0x2000      MLA      R0,R1,R0,R2
   \   000000C6   0x3810             SUBS     R0,R0,#+16
   \   000000C8   0x....             LDR.N    R1,??DataTable8_6
   \   000000CA   0x7108             STRB     R0,[R1, #+4]
    573                boolcallonce=TRUE;
   \   000000CC   0x2001             MOVS     R0,#+1
   \   000000CE   0x....             LDR.N    R1,??DataTable8_3
   \   000000D0   0x7008             STRB     R0,[R1, #+0]
    574                UserApp_StateMachine = UserAppSM_Idle;
   \   000000D2   0x....             LDR.N    R0,??DataTable8_10
   \   000000D4   0x....             LDR.N    R1,??DataTable8_2
   \   000000D6   0x6008             STR      R0,[R1, #+0]
    575              }
    576            } 
    577          }/*end moudle*/
   \                     ??UserAppSM_AutoSelect_5: (+1)
   \   000000D8   0xBD07             POP      {R0-R2,PC}       ;; return

   \                                 In section .data, align 4
   \                     ??u8timelast:
   \   00000000   0x30 0x30          DC8 48, 48, 0, 0
   \              0x00 0x00    
    578          
    579          /*turn off all the light */
    580          /*------------------------------------------------------*/

   \                                 In section .text, align 4, keep-with-next
    581          static void UserAppSM_SleepSelect(void)
    582          {
   \                     UserAppSM_SleepSelect: (+1)
   \   00000000   0xB580             PUSH     {R7,LR}
    583            u8TransMessage[5]=~u8TransMessage[5];
   \   00000002   0x....             LDR.N    R0,??DataTable8_6
   \   00000004   0x7940             LDRB     R0,[R0, #+5]
   \   00000006   0x43C0             MVNS     R0,R0
   \   00000008   0x....             LDR.N    R1,??DataTable8_6
   \   0000000A   0x7148             STRB     R0,[R1, #+5]
    584             LedToggle(LCD_RED);
   \   0000000C   0x2008             MOVS     R0,#+8
   \   0000000E   0x.... 0x....      BL       LedToggle
    585             LedToggle(LCD_GREEN);
   \   00000012   0x2009             MOVS     R0,#+9
   \   00000014   0x.... 0x....      BL       LedToggle
    586             LedToggle(LCD_BLUE);
   \   00000018   0x200A             MOVS     R0,#+10
   \   0000001A   0x.... 0x....      BL       LedToggle
    587            boolcallonce=TRUE;
   \   0000001E   0x2001             MOVS     R0,#+1
   \   00000020   0x....             LDR.N    R1,??DataTable8_3
   \   00000022   0x7008             STRB     R0,[R1, #+0]
    588            UserApp_StateMachine = UserAppSM_Idle;
   \   00000024   0x....             LDR.N    R0,??DataTable8_10
   \   00000026   0x....             LDR.N    R1,??DataTable8_2
   \   00000028   0x6008             STR      R0,[R1, #+0]
    589          }
   \   0000002A   0xBD01             POP      {R0,PC}          ;; return
    590          /*-------------------------------------------------------------------------------------------------------------------*/
    591          /* Handle an error */
    592          static void UserAppSM_Error(void)          
                             ^
Warning[Pe177]: function "UserAppSM_Error" was declared but never referenced

  static u32 UserApp_u32Timeout;                      /* Timeout counter used across states */
             ^
"F:\ѧϰ\EiE\eiegit\dlpro\firmware_mpg_common\application\user_app.c",68  Warning[Pe177]: 
          variable "UserApp_u32Timeout" was declared but never referenced
    593          {
    594            
    595          } /* end UserAppSM_Error() */
    596          
    597          /*-------------------------------------------------------------------------------------------------------------------*/
    598          /* State to sit in if init failed */

   \                                 In section .text, align 4, keep-with-next
    599          static void UserAppSM_FailedInit(void)          
    600          {
    601              
    602          } /* end UserAppSM_FailedInit() */
   \                     UserAppSM_FailedInit: (+1)
   \   00000000   0x4770             BX       LR               ;; return

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8:
   \   00000000   0x........         DC32     G_stAntSetupData

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_1:
   \   00000000   0x........         DC32     UserApp_CursorPosition

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_2:
   \   00000000   0x........         DC32     UserApp_StateMachine

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_3:
   \   00000000   0x........         DC32     boolcallonce

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_4:
   \   00000000   0x........         DC32     u8Funtion1Message

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_5:
   \   00000000   0x........         DC32     u8Funtion2Message

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_6:
   \   00000000   0x........         DC32     u8TransMessage

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_7:
   \   00000000   0x........         DC32     u8off

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_8:
   \   00000000   0x........         DC32     u8on

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_9:
   \   00000000   0x........         DC32     G_eAntApiCurrentMessageClass

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_10:
   \   00000000   0x........         DC32     UserAppSM_Idle

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_11:
   \   00000000   0x........         DC32     ??u8Funtion1SubMenu

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_12:
   \   00000000   0x........         DC32     ??u8Funtion2SubMenu

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_13:
   \   00000000   0x........         DC32     ?_0

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_14:
   \   00000000   0x........         DC32     ??u8TCounterMessage

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_15:
   \   00000000   0x........         DC32     ?_1

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_16:
   \   00000000   0x........         DC32     ??u8WindSpeed

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_17:
   \   00000000   0x........         DC32     ?_2

   \                                 In section .text, align 4, keep-with-next
   \                     ??DataTable8_18:
   \   00000000   0x........         DC32     ??u8timelast

   \                                 In section .rodata, align 4
   \                     ?_0:
   \   00000000   0x74 0x65          DC8 "temprature: "
   \              0x6D 0x70    
   \              0x72 0x61    
   \              0x74 0x75    
   \              0x72 0x65    
   \              0x3A 0x20    
   \              0x00         
   \   0000000D   0x00 0x00          DC8 0, 0, 0
   \              0x00         

   \                                 In section .rodata, align 4
   \                     ?_1:
   \   00000000   0x77 0x69          DC8 "windspeed :"
   \              0x6E 0x64    
   \              0x73 0x70    
   \              0x65 0x65    
   \              0x64 0x20    
   \              0x3A 0x00    

   \                                 In section .rodata, align 4
   \                     ?_2:
   \   00000000   0x74 0x69          DC8 "timing:"
   \              0x6D 0x69    
   \              0x6E 0x67    
   \              0x3A 0x00    
    603          /*--------------------------------------------------------------------------------------------------------------------*/
    604          /* End of File                                                                                                        */
    605          /*--------------------------------------------------------------------------------------------------------------------*/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   UserAppInitialize
         8   -> AntChannelConfig
         8   -> AntOpenChannel
         8   -> LCDCommand
       8   UserAppRunActiveState
         8   -- Indirect call
      16   UserAppSM_AutoSelect
        16   -> ButtonAcknowledge
        16   -> LCDCommand
        16   -> LCDMessage
        16   -> WasButtonPressed
       0   UserAppSM_FailedInit
       8   UserAppSM_FuntionSelect
         8   -> ButtonAcknowledge
         8   -> LCDCommand
         8   -> LCDMessage
         8   -> WasButtonPressed
       8   UserAppSM_Idle
         8   -> AntQueueBroadcastMessage
         8   -> AntReadData
         8   -> ButtonAcknowledge
         8   -> LCDCommand
         8   -> LCDMessage
         8   -> WasButtonPressed
       8   UserAppSM_SleepSelect
         8   -> LedToggle
       0   UserAppSM_SwitchSelect
      24   UserAppSM_TemperSelect
        24   -> ButtonAcknowledge
        24   -> LCDCommand
        24   -> LCDMessage
        24   -> WasButtonPressed
        24   -> __aeabi_memcpy
      24   UserAppSM_WindSelect
        24   -> ButtonAcknowledge
        24   -> LCDCommand
        24   -> LCDMessage
        24   -> WasButtonPressed


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable8
       4  ??DataTable8_1
       4  ??DataTable8_10
       4  ??DataTable8_11
       4  ??DataTable8_12
       4  ??DataTable8_13
       4  ??DataTable8_14
       4  ??DataTable8_15
       4  ??DataTable8_16
       4  ??DataTable8_17
       4  ??DataTable8_18
       4  ??DataTable8_2
       4  ??DataTable8_3
       4  ??DataTable8_4
       4  ??DataTable8_5
       4  ??DataTable8_6
       4  ??DataTable8_7
       4  ??DataTable8_8
       4  ??DataTable8_9
      16  ?_0
      12  ?_1
       8  ?_2
       4  G_u32UserAppFlags
     132  UserAppInitialize
      12  UserAppRunActiveState
     218  UserAppSM_AutoSelect
       2  UserAppSM_FailedInit
     380  UserAppSM_FuntionSelect
     554  UserAppSM_Idle
      44  UserAppSM_SleepSelect
      34  UserAppSM_SwitchSelect
     218  UserAppSM_TemperSelect
     192  UserAppSM_WindSelect
       1  UserApp_CursorPosition
       4  UserApp_StateMachine
       1  boolcallonce
      24  u8Funtion1Message
      16  u8Funtion1SubMenu
      16  u8Funtion2Message
      20  u8Funtion2SubMenu
       4  u8TCounterMessage
       8  u8TransMessage
       2  u8WindSpeed
       4  u8off
       4  u8on
       4  u8timelast

 
     9 bytes in section .bss
   103 bytes in section .data
    36 bytes in section .rodata
 1 862 bytes in section .text
 
 1 862 bytes of CODE  memory
    36 bytes of CONST memory
   112 bytes of DATA  memory

Errors: none
Warnings: 3
